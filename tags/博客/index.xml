<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>博客 on</title><link>https://notes.abser.top/tags/%E5%8D%9A%E5%AE%A2/</link><description>Recent content in 博客 on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 05 Aug 2016 20:20:56 -0400</lastBuildDate><atom:link href="https://notes.abser.top/tags/%E5%8D%9A%E5%AE%A2/index.xml" rel="self" type="application/rss+xml"/><item><title>Configmap/Secret Manager</title><link>https://notes.abser.top/blogs/Configmap-Secret-Manager/</link><pubDate>Fri, 05 Aug 2016 20:20:56 -0400</pubDate><guid>https://notes.abser.top/blogs/Configmap-Secret-Manager/</guid><description>Configmap/Secret Manager
ReadLink configmap manager pkg/kubelet/secret/secret_manager.go Configmap Manager 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // Manager interface provides methods for Kubelet to manage ConfigMap. type Manager interface { // Get configmap by configmap namespace and name.</description></item><item><title>How Cloud Develop Kit from Google designed the docstore interface</title><link>https://notes.abser.top/blogs/How-Cloud-Develop-Kit-from-Google-designed-the-docstore-interface/</link><pubDate>Fri, 05 Aug 2016 20:20:56 -0400</pubDate><guid>https://notes.abser.top/blogs/How-Cloud-Develop-Kit-from-Google-designed-the-docstore-interface/</guid><description>How [[Cloud Develop Kit]] from Google designed the docstore interface
Refer Docstore · Go CDK urls.go - google/go-cloud - Sourcegraph driver.go - Go Design objectives: through the abstraction layer, we can mask differences, provide services in a standardized way, and configure business applications through description files.</description></item><item><title>Node Status Manager</title><link>https://notes.abser.top/blogs/Node-Status-Manager/</link><pubDate>Fri, 05 Aug 2016 20:20:56 -0400</pubDate><guid>https://notes.abser.top/blogs/Node-Status-Manager/</guid><description>Node Status Manager
ReadLink pkg/kubelet/nodestatus/setters.go / pkg / kubelet / kubelet_node_status.go
Directory Layout 1 2 3 pkg/kubelet/nodestatus |- setters.go |- setters_test.go
Setter 1 2 3 // Setter modifies the node in-place, and returns an error if the modification failed.</description></item><item><title>Open Source History of Dapr project</title><link>https://notes.abser.top/blogs/Open-Source-History-of-Dapr-project/</link><pubDate>Fri, 05 Aug 2016 20:20:56 -0400</pubDate><guid>https://notes.abser.top/blogs/Open-Source-History-of-Dapr-project/</guid><description>[[## Open Source]] History of [[Dapr]] project
At the beginning of this open-source column, I wrote this article to describe the birth and development of open-source projects, express my views on the open-source community and ecology, and share it with you.</description></item><item><title>React Hooks State Persistence</title><link>https://notes.abser.top/blogs/React-Hooks-State-Persistence/</link><pubDate>Fri, 05 Aug 2016 20:20:56 -0400</pubDate><guid>https://notes.abser.top/blogs/React-Hooks-State-Persistence/</guid><description>本文讲述如何分析设计 通过 [[React Hooks]] 进行 State 持久化管理
分析 正常前端，组件为类文件，自己维持状态，不易复用。
首先把组件中的 [[UI]] 和 状态分开，用 Action 连接，如下图。
![[blogs/Pasted image 20221011190847.png]]
Action 是[[算子]]
Function 则可成为以下函数
UI = f(S)
状态驱动组件重新渲染 UI
Scu =f(Sc, ∆)
组件会用到的 Scu 和 更改 Sc 的 ∆ 方法决定。</description></item><item><title>Role of microservice framework</title><link>https://notes.abser.top/blogs/Role-of-microservice-framework/</link><pubDate>Fri, 05 Aug 2016 20:20:56 -0400</pubDate><guid>https://notes.abser.top/blogs/Role-of-microservice-framework/</guid><description>Role of [[microservice framework]] HTTP Channel and [[GRPC]] Channel before we begin, let&amp;rsquo;s explore the differences between HTTP and RPC. The reason why gRPC is discussed here is that no one uses common RPC.
HTTP is a common communication method used for business coding, and its popularity is needless to say.</description></item><item><title>Technician and experiencer</title><link>https://notes.abser.top/blogs/Technician-and-experiencer/</link><pubDate>Fri, 05 Aug 2016 20:20:56 -0400</pubDate><guid>https://notes.abser.top/blogs/Technician-and-experiencer/</guid><description>Technician and experiencer We believe that the experience of the experience is linked to the actual things and actual behaviors, while the technology of the technician symbolizes more general knowledge.
First of all, in practical operation, it can be seen that skilled people are inferior to experienced people in all aspects, but they usually do better than inexperienced people.</description></item><item><title>为什么学习稀缺的技能</title><link>https://notes.abser.top/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AD%A6%E4%B9%A0%E7%A8%80%E7%BC%BA%E7%9A%84%E6%8A%80%E8%83%BD/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AD%A6%E4%B9%A0%E7%A8%80%E7%BC%BA%E7%9A%84%E6%8A%80%E8%83%BD/</guid><description>应用异常值算法的困难正是这样做的原因！更困难意味着更稀有。
为了帮助您开始应对这些挑战，以下是我一遍又一遍地回顾的四个经验法则。虽然只有四个，但它们的冲击力很大。它们是数百小时思考如何更好地找到稀有和有价值的技能的简化：
成为第一个学习有价值的技能的人。 跟踪新兴科学、技术、应用程序、工具、行业和领域。当它们呈指数增长时，花几个小时探索它们，看看是否值得投入更多时间。它可以帮助您尝试新事物，而不会将时间浪费在变成无用的事物上。 学习很难的有价值的技能。 愿意投资于禁忌、不是超级性感的、耗时、费力、看起来有风险或超级技术或学术的领域。 学习具有隐藏好处的宝贵技能。 人类有价值盲点。他们低估了具有抽象、长期回报的技能；微技能；其他学科的技能；和被遗忘的经典思想。 重新定义价值比共识更好。 在我们的职业生涯中，我们利用我们的技能为他人服务。可能是客户、老板、我们的粉丝、招聘人员或其他人。如果您能够比其他人更好地了解您所服务的人的未满足需求，您将能够更好地满足这些需求。 或者，简而言之，请记住：
成为第一 面对困难 寻找隐藏的好处 重新定义价值 以上是 Michael Simomons 的学习稀有技能的理论，其中总结的几点我们应该尝试的规则，在他的规则下，他指导有如下学习资源（随个人的情景可以有变种，这是当然的） ![[2022-09-29#^cff4f1]]
第一步，解释：我们现在从规则开始解释，从而找到我们自己情景下的学习 首先，所有的技能都很有价值，然后我们要去寻找稀缺性的技能。这个前提是我们先找到有价值的技能，通过一个指数增长的模型判断一个事物发展是否超出常规，这通常都代表这件事有价值。那我们以程序员的视角举例， Web3 正好是急需技能之一（因为需求而有价值），物联网，边缘方面的技能也并驾齐驱。 然后我们去寻找技能的稀缺性！（因为稀缺性决定价格）这也有一个模型来描述他，即被禁止的，未被大部分人发现的，可能枯燥的，耗时，费力的，或者看起来非常有风险的，以及非常学术的，非常技术专业的领域。（毕竟你不能指望一蹴而就的领域有多稀缺，信息差是很难一直保持的） 同时不要忽视长期的被动技能，复利主义，以及一些经典思想，他们由于长期存在于我们的身边，会被我们的价值评估器忽视。以抽象的，长期回报的技能为例：写笔记，坚持总结输出；微技能，一些工作上的小技巧，比如电脑使用领域上的一些工具快捷键；其他领域的技能！ 往往会产生巨大的化学反应，比如生物对计算机领域的影响，当然我还是建议学数学，比如金融割韭菜融入区块链；以及一些经典思想：分治和中间层的思想贯彻整个计算机科学，经常发现计算机的一些新领域应用了老的经典的思想从而大放异彩，比如深度学习啦！ 重新定义价值而非共识，这句类比对一个行业需求的深挖。技能可以为每一个使用者提供相同影响的结果，但精准的需求分析和挖掘，能让某项技能发掘出更多的价值，他提升了价值的同时也提升了稀缺性。 当然，以上规则其实主要是个人视角出发，如何发挥个人最大的影响力的思考，从团队等方向还能有更多，比如规模效应，然而我们希望将讨论范围限制在个人视角上以期提供一些切实的指导。
道理的扩散成本是非常低的，但是让一个人相信这个道理的成本是极高的。 第二步 分析学习资源的新变化 考虑稀缺性前 后 阅读最新的畅销书 学术论文 时刻检查社交媒体查看最具影响力的人的发言 领域之外的学科（加密学、经济学） 时刻保持关注行业最新的新闻（所有人都在关注） 获取一些专有数据的授权并研究 和领域内部人士建立深厚的关系（并且他们很少公开分享自己的观点 一些抽象的心理模型 可以看到其中明显的差距，同样的例子还有很多，就不一一列举了。笔者这里最想强调的还是稀缺代表远离共识，意味着你的选择几乎总是错的（即使你是个顶尖聪明的人），这是需要谦虚的态度，避免一次投入过多，需要有足够多的证据、验证。所以保持谦虚，离群才能尽量保证个人的稳定。</description></item></channel></rss>