<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>🎁首页 on</title><link>https://notes.abser.top/</link><description>Recent content in 🎁首页 on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://notes.abser.top/index.xml" rel="self" type="application/rss+xml"/><item><title>2022-08-29</title><link>https://notes.abser.top/diary/2022-08-29/</link><pubDate>Wed, 12 Oct 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/diary/2022-08-29/</guid><description>[[未来人才的学习目标]]</description></item><item><title>AI 的基础设施</title><link>https://notes.abser.top/AI-%E7%9A%84%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD/</link><pubDate>Wed, 12 Oct 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/AI-%E7%9A%84%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD/</guid><description>AI Infra</description></item><item><title>CTO 确实同时需要扮演优秀的 engineer</title><link>https://notes.abser.top/CTO-%E7%A1%AE%E5%AE%9E%E5%90%8C%E6%97%B6%E9%9C%80%E8%A6%81%E6%89%AE%E6%BC%94%E4%BC%98%E7%A7%80%E7%9A%84-engineer/</link><pubDate>Wed, 12 Oct 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/CTO-%E7%A1%AE%E5%AE%9E%E5%90%8C%E6%97%B6%E9%9C%80%E8%A6%81%E6%89%AE%E6%BC%94%E4%BC%98%E7%A7%80%E7%9A%84-engineer/</guid><description>CTO 确实同时需要扮演优秀的 engineer 需要对该角色设置一些评判满足标准，保证 CTO 满足达到标准 https://blog.southparkcommons.com/your-cto-should-actually-be-technical/。该文章也在 HackerNews 上引起热议。</description></item><item><title>做总结和感想的时候需要具体的事例</title><link>https://notes.abser.top/%E5%81%9A%E6%80%BB%E7%BB%93%E5%92%8C%E6%84%9F%E6%83%B3%E7%9A%84%E6%97%B6%E5%80%99%E9%9C%80%E8%A6%81%E5%85%B7%E4%BD%93%E7%9A%84%E4%BA%8B%E4%BE%8B/</link><pubDate>Wed, 12 Oct 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E5%81%9A%E6%80%BB%E7%BB%93%E5%92%8C%E6%84%9F%E6%83%B3%E7%9A%84%E6%97%B6%E5%80%99%E9%9C%80%E8%A6%81%E5%85%B7%E4%BD%93%E7%9A%84%E4%BA%8B%E4%BE%8B/</guid><description>由前文想到，不同情况下人会有不同的感想，但是事例不会变，如果只记录当时的感悟和道理，并不能和后续的想法做对比。没有事例也没有说服力。</description></item><item><title>学习稀缺的技能</title><link>https://notes.abser.top/%E5%AD%A6%E4%B9%A0%E7%A8%80%E7%BC%BA%E7%9A%84%E6%8A%80%E8%83%BD/</link><pubDate>Wed, 12 Oct 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E5%AD%A6%E4%B9%A0%E7%A8%80%E7%BC%BA%E7%9A%84%E6%8A%80%E8%83%BD/</guid><description>应用异常值算法的困难正是这样做的原因！更困难意味着更稀有。
为了帮助您开始应对这些挑战，以下是我一遍又一遍地回顾的四个经验法则。虽然只有四个，但它们的冲击力很大。它们是数百小时思考如何更好地找到稀有和有价值的技能的简化：
成为第一个学习有价值的技能的人。 跟踪新兴科学、技术、应用程序、工具、行业和领域。当它们呈指数增长时，花几个小时探索它们，看看是否值得投入更多时间。它可以帮助您尝试新事物，而不会将时间浪费在变成无用的事物上。 学习很难的有价值的技能。 愿意投资于禁忌、不是超级性感的、耗时、费力、看起来有风险或超级技术或学术的领域。 学习具有隐藏好处的宝贵技能。 人类有价值盲点。他们低估了具有抽象、长期回报的技能；微技能；其他学科的技能；和被遗忘的经典思想。 重新定义价值比共识更好。 在我们的职业生涯中，我们利用我们的技能为他人服务。可能是客户、老板、我们的粉丝、招聘人员或其他人。如果您能够比其他人更好地了解您所服务的人的未满足需求，您将能够更好地满足这些需求。 或者，简而言之，请记住：
成为第一 面对困难 寻找隐藏的好处 重新定义价值 以上是 Michael Simomons 的学习稀有技能的理论，其中总结的几点我们应该尝试的规则，在他的规则下，他指导有如下学习资源（随个人的情景可以有变种，这是当然的） ![[2022-09-29#^cff4f1]]
第一步，解释：我们现在从规则开始解释，从而找到我们自己情景下的学习 首先，所有的技能都很有价值，然后我们要去寻找稀缺性的技能。这个前提是我们先找到有价值的技能，通过一个指数增长的模型判断一个事物发展是否超出常规，这通常都代表这件事有价值。那我们以程序员的视角举例， Web3 正好是急需技能之一（因为需求而有价值），物联网，边缘方面的技能也并驾齐驱。 然后我们去寻找技能的稀缺性！（因为稀缺性决定价格）这也有一个模型来描述他，即被禁止的，未被大部分人发现的，可能枯燥的，耗时，费力的，或者看起来非常有风险的，以及非常学术的，非常技术专业的领域。（毕竟你不能指望一蹴而就的领域有多稀缺，信息差是很难一直保持的） 同时不要忽视长期的被动技能，复利主义，以及一些经典思想，他们由于长期存在于我们的身边，会被我们的价值评估器忽视。以抽象的，长期回报的技能为例：写笔记，坚持总结输出；微技能，一些工作上的小技巧，比如电脑使用领域上的一些工具快捷键；其他领域的技能！ 往往会产生巨大的化学反应，比如生物对计算机领域的影响，当然我还是建议学数学，比如金融割韭菜融入区块链；以及一些经典思想：分治和中间层的思想贯彻整个计算机科学，经常发现计算机的一些新领域应用了老的经典的思想从而大放异彩，比如深度学习啦！ 重新定义价值而非共识，这句类比对一个行业需求的深挖。技能可以为每一个使用者提供相同影响的结果，但精准的需求分析和挖掘，能让某项技能发掘出更多的价值，他提升了价值的同时也提升了稀缺性。 当然，以上规则其实主要是个人视角出发，如何发挥个人最大的影响力的思考，从团队等方向还能有更多，比如规模效应，然而我们希望将讨论范围限制在个人视角上以期提供一些切实的指导。
道理的扩散成本是非常低的，但是让一个人相信这个道理的成本是极高的。 第二步 分析学习资源的新变化 考虑稀缺性前 后 阅读最新的畅销书 学术论文 时刻检查社交媒体查看最具影响力的人的发言 领域之外的学科（加密学、经济学） 时刻保持关注行业最新的新闻（所有人都在关注） 获取一些专有数据的授权并研究 和领域内部人士建立深厚的关系（并且他们很少公开分享自己的观点 一些抽象的心理模型 可以看到其中明显的差距，同样的例子还有很多，就不一一列举了。笔者这里最想强调的还是稀缺代表远离共识，意味着你的选择几乎总是错的（即使你是个顶尖聪明的人），这是需要谦虚的态度，避免一次投入过多，需要有足够多的证据、验证。所以保持谦虚，离群才能尽量保证个人的稳定。</description></item><item><title>Configmap/Secret Manager</title><link>https://notes.abser.top/blogs/Configmap-Secret-Manager/</link><pubDate>Fri, 05 Aug 2016 20:20:56 -0400</pubDate><guid>https://notes.abser.top/blogs/Configmap-Secret-Manager/</guid><description>Configmap/Secret Manager
ReadLink configmap manager pkg/kubelet/secret/secret_manager.go Configmap Manager 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // Manager interface provides methods for Kubelet to manage ConfigMap. type Manager interface { // Get configmap by configmap namespace and name.</description></item><item><title>How Cloud Develop Kit from Google designed the docstore interface</title><link>https://notes.abser.top/blogs/How-Cloud-Develop-Kit-from-Google-designed-the-docstore-interface/</link><pubDate>Fri, 05 Aug 2016 20:20:56 -0400</pubDate><guid>https://notes.abser.top/blogs/How-Cloud-Develop-Kit-from-Google-designed-the-docstore-interface/</guid><description>How [[Cloud Develop Kit]] from Google designed the docstore interface
Refer Docstore · Go CDK urls.go - google/go-cloud - Sourcegraph driver.go - Go Design objectives: through the abstraction layer, we can mask differences, provide services in a standardized way, and configure business applications through description files.</description></item><item><title>Node Status Manager</title><link>https://notes.abser.top/blogs/Node-Status-Manager/</link><pubDate>Fri, 05 Aug 2016 20:20:56 -0400</pubDate><guid>https://notes.abser.top/blogs/Node-Status-Manager/</guid><description>Node Status Manager
ReadLink pkg/kubelet/nodestatus/setters.go / pkg / kubelet / kubelet_node_status.go
Directory Layout 1 2 3 pkg/kubelet/nodestatus |- setters.go |- setters_test.go
Setter 1 2 3 // Setter modifies the node in-place, and returns an error if the modification failed.</description></item><item><title>Open Source History of Dapr project</title><link>https://notes.abser.top/blogs/Open-Source-History-of-Dapr-project/</link><pubDate>Fri, 05 Aug 2016 20:20:56 -0400</pubDate><guid>https://notes.abser.top/blogs/Open-Source-History-of-Dapr-project/</guid><description>[[## Open Source]] History of [[Dapr]] project
At the beginning of this open-source column, I wrote this article to describe the birth and development of open-source projects, express my views on the open-source community and ecology, and share it with you.</description></item><item><title>React Hooks State Persistence</title><link>https://notes.abser.top/blogs/React-Hooks-State-Persistence/</link><pubDate>Fri, 05 Aug 2016 20:20:56 -0400</pubDate><guid>https://notes.abser.top/blogs/React-Hooks-State-Persistence/</guid><description>本文讲述如何分析设计 通过 [[React Hooks]] 进行 State 持久化管理
分析 正常前端，组件为类文件，自己维持状态，不易复用。
首先把组件中的 [[UI]] 和 状态分开，用 Action 连接，如下图。
![[blogs/Pasted image 20221011190847.png]]
Action 是[[算子]]
Function 则可成为以下函数
UI = f(S)
状态驱动组件重新渲染 UI
Scu =f(Sc, ∆)
组件会用到的 Scu 和 更改 Sc 的 ∆ 方法决定。</description></item><item><title>Role of microservice framework</title><link>https://notes.abser.top/blogs/Role-of-microservice-framework/</link><pubDate>Fri, 05 Aug 2016 20:20:56 -0400</pubDate><guid>https://notes.abser.top/blogs/Role-of-microservice-framework/</guid><description>Role of [[microservice framework]] HTTP Channel and [[GRPC]] Channel before we begin, let&amp;rsquo;s explore the differences between HTTP and RPC. The reason why gRPC is discussed here is that no one uses common RPC.
HTTP is a common communication method used for business coding, and its popularity is needless to say.</description></item><item><title>Technician and experiencer</title><link>https://notes.abser.top/blogs/Technician-and-experiencer/</link><pubDate>Fri, 05 Aug 2016 20:20:56 -0400</pubDate><guid>https://notes.abser.top/blogs/Technician-and-experiencer/</guid><description>Technician and experiencer We believe that the experience of the experience is linked to the actual things and actual behaviors, while the technology of the technician symbolizes more general knowledge.
First of all, in practical operation, it can be seen that skilled people are inferior to experienced people in all aspects, but they usually do better than inexperienced people.</description></item><item><title>TokenBucket</title><link>https://notes.abser.top/blogs/TokenBucket/</link><pubDate>Fri, 05 Aug 2016 20:20:56 -0400</pubDate><guid>https://notes.abser.top/blogs/TokenBucket/</guid><description>TokenBucket Overview ![image.png]( https://cdn.hashnode.com/res/hashnode/image/upload/v1657442131915/dUeLDBuYM.png align=&amp;ldquo;left&amp;rdquo;)
available per second Limit put tokens into the bucket, or, every time 1/Limit add a token to the second bucket maximum storage in buckets burst tokens. If the bucket is full, the new token will be discarded.</description></item><item><title/><link>https://notes.abser.top/chrome-%E7%9A%84-lighthouse-%E6%B5%8B%E8%AF%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/chrome-%E7%9A%84-lighthouse-%E6%B5%8B%E8%AF%95/</guid><description>google 官方介绍文档
一个 [[chrome]] 内置功能，评判网页性能打开速度等工作。评判很准所以传播广泛</description></item><item><title/><link>https://notes.abser.top/diary/2022-08-09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/diary/2022-08-09/</guid><description>观察到的好产品经理的共有特质是[[洞察(insight) ]]而在公司里有话语权的产品经理共有特质则是[[雄辩(eloquence)]]这两个特质许多时候是不兼容的，因为说的多了，看和听的时间就少了。 所以大公司产品到后来都做烂，除非顶层负责人还能保持产品初心。 来自 @天舟的分享</description></item><item><title/><link>https://notes.abser.top/nginx-%E9%80%9A%E7%94%A8%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/nginx-%E9%80%9A%E7%94%A8%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</guid><description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 server { listen 80; # gzip config gzip on; gzip_min_length 1k; gzip_comp_level 9; gzip_types text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml; gzip_vary on; gzip_disable &amp;#34;MSIE [1-6]\.</description></item><item><title/><link>https://notes.abser.top/NVMe/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/NVMe/</guid><description>Non-Volatile Memory Host Controller Interface Specification，非易失性[[存储]]主机控制器接口标准
为什么 NVMe 更快 #query [[PCIe]]：总线带来更大带宽和更低延迟 并行：传统的[[SATA]]设备只能支持一个队列，一次只能接收32条数据；而NVMe存储则支持最多64000个队列，每个队列有64000个条目。 [[SATA]] 协议理论最大传输速度 6.0Gbps</description></item><item><title/><link>https://notes.abser.top/SaaS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/SaaS/</guid><description>2018 年吧，我还记得当时讲解的现场，经过一系列的推演和被教学，当时决定 SaaS 作为未来 5 年的研究方向， 现在回首，确实通过 SaaS 进入了云计算的领域，做到了 [[IaaS]] 层去啦。也对基础设施有更深的领悟。对于 IT 和互联网企业和物联网企业，一个扎实的基础设施，灵活扩展的[[规范标准]]，行业的深耕领域知识的结合，这些基础设施的构建将会是未来一个阶段的主旋律。当[[行业的细分标准-基础设施层|行业细分标准]]制定完成后，类似 FireStore 的 SaaS 将会较容易的做出来了。说不定这时候，反而阴差阳错的实现了当初的目标。</description></item><item><title/><link>https://notes.abser.top/slipbox/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/slipbox/</guid><description>原来就是卢曼笔记啊</description></item><item><title/><link>https://notes.abser.top/terraform-minio/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/terraform-minio/</guid><description>结合 devcloud 和之前的 minio 中间件思考一下问题：如何集成使用？
首先描述 Minio Provier， [[MInio]] 是需要自己部署的，[[Terraform]] minio 这个 [[terraform provider|provicer]]只是提供了配置选项。不过我们使用基础设施其实也就是配置了。没有启动功能用什么启动呢？
自己本地启动 通过 terraform 的其他云 provider 在云上申请一个这样的资源，比如 AWS Terraform Provider 当然，由于 [[terraform]] 的 [[terraform provider]] 编写比较简单，其实也可以自己编辑一个以 [[docker]] 作为 [[infrastructure]] 的包含 minio 启动流程的 provider 啦。比如组合 docker provider 声明一个 minio 镜像的 [[container]] 就好啦。</description></item><item><title/><link>https://notes.abser.top/Terraform-%E9%85%8D%E7%BD%AE%E6%9C%AC%E5%9C%B0%E7%A6%BB%E7%BA%BF%E6%BA%90/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/Terraform-%E9%85%8D%E7%BD%AE%E6%9C%AC%E5%9C%B0%E7%A6%BB%E7%BA%BF%E6%BA%90/</guid><description>1. 创建配置文件 .terraformrc是 [[Terraform]] CLI的配置文件
1 2 3 4 5 6 7 8 plugin_cache_dir = &amp;#34;/root/.terraform.d/terraform-plugin-cache&amp;#34; disable_checkpoint = true provider_installation { filesystem_mirror { path = &amp;#34;/root/.terraform.d/terraform-plugin-cache&amp;#34; include = [&amp;#34;registry.terraform.io/*/*&amp;#34;] } } plugin_cache_dir 是插件的缓存目录（此目录需要提前创建不然init报错） disable_checkpoint 禁用 需要连接HashiCorp 提供的网络服务的升级和安全公告检查 2.</description></item><item><title/><link>https://notes.abser.top/%E4%BA%91%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E4%BA%91%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</guid><description>Notes 和 [[分布式]] 有关</description></item><item><title/><link>https://notes.abser.top/%E5%85%AC%E6%9C%89%E4%BA%91%E5%92%8C%E7%A7%81%E6%9C%89%E4%BA%91%E5%8D%A0%E6%AF%94/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E5%85%AC%E6%9C%89%E4%BA%91%E5%92%8C%E7%A7%81%E6%9C%89%E4%BA%91%E5%8D%A0%E6%AF%94/</guid><description>[[AWS]] CEO Andy Jessy在AWS 2019 re:Invent大会上分享了如下消息：[[公有云]]的总支出只占到总IT支出的3% 。IT支出中，[[私有云]]仍占绝大多数</description></item><item><title/><link>https://notes.abser.top/%E5%89%8D%E6%B2%BF%E7%9F%A5%E8%AF%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E5%89%8D%E6%B2%BF%E7%9F%A5%E8%AF%86/</guid><description> 梳理一下我学习的过去的前沿知识和未来要学习的范畴 [[SaaS]]、[[IaaS]] [[GitOps]]：真没用 [[Workflow as Code|Temporal]] [[PriceOps]]</description></item><item><title/><link>https://notes.abser.top/%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/</guid><description>存储管理关注的不是高性能，而是高扩展，管理面的能力以存储为例，其实就是贯彻整个存储生命周期，通过管理的手段提高存储价值。
因此，数据的生产、[[备份]]、[[故障隔离]]、[[容灾]]、恢复、[[持续数据保护]]、安全能力接入、数据 AI 接入这些属于管理面的能力。</description></item><item><title/><link>https://notes.abser.top/%E5%AD%98%E5%82%A8%E9%A2%86%E5%9F%9F%E7%9A%84%E6%99%BA%E8%83%BD%E5%8C%96/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E5%AD%98%E5%82%A8%E9%A2%86%E5%9F%9F%E7%9A%84%E6%99%BA%E8%83%BD%E5%8C%96/</guid><description>![[Pasted image 20221013145353.png]]</description></item><item><title/><link>https://notes.abser.top/%E6%9C%AA%E6%9D%A5%E4%BA%BA%E6%89%8D%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%9B%AE%E6%A0%87/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E6%9C%AA%E6%9D%A5%E4%BA%BA%E6%89%8D%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%9B%AE%E6%A0%87/</guid><description>Summary 做 ==AI 的基础设施==的学习
Questions/Cues 2022-10-12 [[学习稀缺的技能]]对[[程序员]]来说是哪些？ #query Notes 做 [[AI 的基础设施]]，再逐渐过渡到数据，后续还有数据交易这些。我的观点是不做ai，毕竟优势不在这。
最优选择还是和金融相关、数据交易相关，但是这些目前都还是起步，风险大，慢慢看就行。
主要是对于这个行业的理解，必须随着持续做下去，才能看到清晰的方向。这样有机会的话，可以带着技术换个更牛的企业，比如银行。
做复合型人才，主要还是要做，做的过程中体会，不要着急，我觉得都没必要在三年内锁死自己发展方向。
存储、网络如果发展的好，本地计算机意义都不大，问题是在什么时候才能达到预期，那么[[云操作系统]]，又应该是什么形态，这些作为主攻方向都是不错的。 ^eda002
反正我觉得与其在性能上下功夫，不如在管理上，硬件成本又不是大问题，对不对。
即使在云端考虑，也是[[管理高于性能]]的，做管控，不做技术细节的提升，本身优势就很大，单项技术深入研究难度极高，但是管理控制是综合技术应用，空间也大。</description></item><item><title/><link>https://notes.abser.top/%E7%AE%A1%E7%90%86%E9%AB%98%E4%BA%8E%E6%80%A7%E8%83%BD/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E7%AE%A1%E7%90%86%E9%AB%98%E4%BA%8E%E6%80%A7%E8%83%BD/</guid><description>摘要 问题、提示 主要笔记 [[分布式]] 和 [[云操作系统]] 带来的变化</description></item><item><title/><link>https://notes.abser.top/%E9%97%AA%E5%AD%98%E5%8C%96/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E9%97%AA%E5%AD%98%E5%8C%96/</guid><description>根据IDC 在2019年12月31日的报道：“2019前三个季度，中国企业级全闪存存储阵列市场同比增长超过60%。IDC预测， 2019年全闪存存储市场仍将达到近50%的增长”。
据报道，[[闪存颗粒]]价格逐年下降（按照30%～40%的降幅）
闪存化的过程中，必然催生[[全闪存阵列]]的发展，其中的相关技术[[NVMe Over Fabric]]（简称NVMe-oF）借助[[RDMA]]等超低延时的传输协议，可远程访问[[SSD]]，解决了下一代数据中心在横向扩展 (Scale-out) 时所遭遇的性能、功能、容量三者之间难以取舍的权衡问题</description></item><item><title>2022-09-27</title><link>https://notes.abser.top/diary/2022-09-27/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/diary/2022-09-27/</guid><description>[[不要片面的根据一部分想法下决定]] [[做总结和感想的时候需要具体的事例]]
[[CTO 确实同时需要扮演优秀的 engineer]]</description></item><item><title>2022-09-28</title><link>https://notes.abser.top/diary/2022-09-28/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/diary/2022-09-28/</guid><description> #todo * * #journal 17:50 离群的特异学习会远离共识，共识通常是正确的，因此稀有的技能选择存在巨大的风险，为了降低风险，我们必须保持谦虚。 18:10 看到一篇很好的关于选择学习什么技能的文章： https://medium.com/accelerated-intelligence/while-most-people-fight-to-learn-in-demand-skills-smart-people-are-secretly-learning-rare-skills-f9b26856c9d6 学习笔记：[[学习稀缺的技能]]</description></item><item><title>2022-09-29</title><link>https://notes.abser.top/diary/2022-09-29/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/diary/2022-09-29/</guid><description> #todo * *
#journal
15:34 添加测试
20:23 memory 真好用，可以用来吐槽，就是没有发送快捷键
20:25 最近需要思考学点什么东西。把昨天的博客看完吧
20:30 学术文章
我领域之外的学科，其他人甚至都不知道
许可专有数据
与可能不会公开分享某些见解的领域内部人士建立深厚的关系
心智模型（难以评估的抽象值） 这些才是应该在我们的日常学习中去学习的东西，总结的面很到位。因为稀缺性，才有放大的价格。 ^cff4f1</description></item><item><title>2022-09-30</title><link>https://notes.abser.top/diary/2022-09-30/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/diary/2022-09-30/</guid><description> #todo golang devcloud 使用 minio 学习稀有技能的进一步研究，找一个目标 [[学习稀缺的技能]] #journal ^e61eca</description></item><item><title>2022-10-08</title><link>https://notes.abser.top/diary/2022-10-08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/diary/2022-10-08/</guid><description>[[buildkit]] 高策写过 buildkit 的使用体验，在他的 [[envd]] 的工作中 ^42517f 新 [[Dockerfile]] 语法特性：buildkit 可以通过 docker buildx build 解析新的语法特性。from [[2022-10-08#^42517f]] 多次 build 之间的缓存 RUN --mount=type=cache,target=/root/.cache/pip pip install ... 多体系架构的支持 docker buildx build --platform linux/amd64,linux/arm64 . 多行脚本 [[Dockerfile 多行脚本]] 只增加一个构建层 [[rocksdb]] 是单节点 KV 数据库, 设计基于 [[LSMs]] .</description></item><item><title>2022-10-09</title><link>https://notes.abser.top/diary/2022-10-09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/diary/2022-10-09/</guid><description>尝试使用软件进行思路的梳理，现在是个人时间看板的梳理。[[MnicTime]] 这个软件是可以记录所有的软件的时间的。手机 iPhone 也可以记录软件使用时间。 不能像上面流水线记录，不然跟不上思路。总结然后记录：
目的：需要找到哪些是可以优化的时间习惯。 通过目前对自我的观察：
各种群聊的聊天，然后发消息，消耗了部分时间 消磨时间的操作，这部分时间应该属于可以优化的。 最后是因为好奇心去看文章的时间 三类大时间中，首先优化聊天时间，去掉大部分要进入查看的群聊即可，感觉很简单嘛。
[[使用 quartz 托管 obsidian 到网络上]]
[[清理 GIt 中的历史文件]]</description></item><item><title>2022-10-10</title><link>https://notes.abser.top/diary/2022-10-10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/diary/2022-10-10/</guid><description>[[Pricing as Code]] 是[[Tier]]这个产品使用的理念。</description></item><item><title>2022-10-12</title><link>https://notes.abser.top/diary/2022-10-12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/diary/2022-10-12/</guid><description>今天研究了一下 [[etcd 的性能瓶颈]]。[[etcd]] 的 event 事件太多，影响 etcd 性能，有很多大公司有过分离存储 event 的实践。 通过参数--etcd-servers-overrides stringSlice可以将event存储到单独的集群。
Etcd is used for two distinct cluster purposes - cluster state and event processing. These have different i/o characteristics. It is important to scalability testing efforts that the iops provided by the servers to etcd be consistent and protected.</description></item><item><title>anaconda 安装</title><link>https://notes.abser.top/anaconda-%E5%AE%89%E8%A3%85/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/anaconda-%E5%AE%89%E8%A3%85/</guid><description>下载地址： https://www.anaconda.com/products/distribution
以 linux 为例，下载的是一个 .sh 的文件，通过 bash 运行他即可
bash Anaconda3-2020.11-Linux-x86_64.sh
会运行一段交互式脚本，确认安装配置。
内网环境配置 conda config --add channels [https://mirrors.aliyun.com/pypi/simple/](https://mirrors.aliyun.com/pypi/simple/)
查看添加的镜像：
conda config --get channels
推荐使用搜到的 .condarc直接复制粘贴
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 channels: - defaults show_channel_urls: true channel_alias: http://xxx.</description></item><item><title>ConfigMap</title><link>https://notes.abser.top/ConfigMap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/ConfigMap/</guid><description>Kubernetes 中的一个对象。可以理解为一个 yaml 文件专门用作 APP 的配置文件，提供了相应的
挂载 监控更新 等功能。 限制：只有 1m 大小</description></item><item><title>CUDA Windows 环境搭建</title><link>https://notes.abser.top/CUDA-Windows-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/CUDA-Windows-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid><description>引用[[anaconda 安装]]
Windows 环境搭建 CUDA https://developer.nvidia.com/cuda-downloads
下载了 windows 下的 CUDA 11.7 的 local 版本，2.5g，下载安装即可
安装完之后重启，可以运行nvidia-smi.exe查看一下自己的显卡。
Conda （python 环境） 下载 miniconda
https://docs.conda.io/en/latest/miniconda.html 安装
通过 code $PROFILE 启动 vscode 添加该环境到 powershell 自动启动脚本中
1 2 # 启动 miniconda 环境 D:\miniconda\shell\condabin\conda-hook.ps1 ;conda activate &amp;#39;D:\miniconda&amp;#39; Pytorch &amp;amp; Jupyter 因为有梯子，速度挺快，就不用镜像源了</description></item><item><title>Dockerfile 多行脚本</title><link>https://notes.abser.top/Dockerfile-%E5%A4%9A%E8%A1%8C%E8%84%9A%E6%9C%AC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/Dockerfile-%E5%A4%9A%E8%A1%8C%E8%84%9A%E6%9C%AC/</guid><description>1 2 3 4 5 6 7 8 # syntax = docker/dockerfile:1.4 FROM debian -RUN apt-get &amp;amp;&amp;amp; \ - apt-get install -y vim +RUN &amp;lt;&amp;lt;eot bash + apt-get update + apt-get install -y vim eot</description></item><item><title>etcd</title><link>https://notes.abser.top/etcd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/etcd/</guid><description>[[分布式]][[键值数据库]]</description></item><item><title>etcd 的性能瓶颈</title><link>https://notes.abser.top/etcd-%E7%9A%84%E6%80%A7%E8%83%BD%E7%93%B6%E9%A2%88/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/etcd-%E7%9A%84%E6%80%A7%E8%83%BD%E7%93%B6%E9%A2%88/</guid><description>[[etcd]] 通常和 [[API Server]] 一起作为整个 [[Kubernetes 的性能瓶颈]]
Refer Link 蚂蚁集团万级规模 K8s 集群 etcd 高可用建设之路 · SOFAStack 以下摘抄的经验数据
当 K8s 集群规模扩大时，etcd 承载着 KV 数据剧增、event 消息暴增以及消息写放大的三种压力。 为了证明所言非虚，特引用部分数据为佐证： 1. etcd KV 数据量级在 100 万以上； 2. etcd event 数据量在 10 万以上； 3. etcd 读流量压力峰值在 30 万 pqm 以上，其中读 event 在 10k qpm 以上； 4.</description></item><item><title>Focus and Different</title><link>https://notes.abser.top/Focus-and-Different/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/Focus-and-Different/</guid><description>摘要 最近总结的 #原则 和 #观念 ： 意义这种东西是通过聚集一个层面产生的。
问题、提示 为什么会觉得[[生活没有意义？]] #query 其实更应该聚焦自己的当下生活，就会发现任何以前评估没有太大影响的事件，都对自己至关重要。 主要笔记</description></item><item><title>Go</title><link>https://notes.abser.top/Go/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/Go/</guid><description>[[Golang]] 的简写，一门计算机语言，[[我]]比较擅长。</description></item><item><title>hugo-extended</title><link>https://notes.abser.top/hugo-extended/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/hugo-extended/</guid><description>hugo 安装网址： https://gohugo.io/getting-started/installing/
windows 我直接使用了安装
1 scoop install hugo-extended</description></item><item><title>hugo-obsidian</title><link>https://notes.abser.top/hugo-obsidian/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/hugo-obsidian/</guid><description>使用 [[Golang]] install 功能安装
1 2 # Install and link `hugo-obsidian` locally go install github.com/jackyzha0/hugo-obsidian@latest</description></item><item><title>IaaS</title><link>https://notes.abser.top/IaaS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/IaaS/</guid><description>摘要 针对笔记问的问题 主要笔记</description></item><item><title>kube-vip 的专门的感谢 issue</title><link>https://notes.abser.top/kube-vip-%E7%9A%84%E4%B8%93%E9%97%A8%E7%9A%84%E6%84%9F%E8%B0%A2-issue/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/kube-vip-%E7%9A%84%E4%B8%93%E9%97%A8%E7%9A%84%E6%84%9F%E8%B0%A2-issue/</guid><description>#开源趣闻 https://github.com/kube-vip/kube-vip/issues/239
Not an issue, just a thank you #239   Closed
opened this issue 4 comments Comments
kylos101 on 11 Jul 2021 This is amazing, I just got it setup, and cannot believe it was that easy to get working!</description></item><item><title>Kubernetes 的性能瓶颈</title><link>https://notes.abser.top/Kubernetes-%E7%9A%84%E6%80%A7%E8%83%BD%E7%93%B6%E9%A2%88/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/Kubernetes-%E7%9A%84%E6%80%A7%E8%83%BD%E7%93%B6%E9%A2%88/</guid><description>[[Kubernetes]] 有很多[[性能调优]]的参数。
2022年10月12日：前年看到的限制是 5000 pod，印象里这个值没有太大提升。
单 Node Pod 承载数：一般在 100 以下，也有强力[[Kubernetes 集群的降本增效]]到 140 的</description></item><item><title>Kubernetes 集群的降本增效</title><link>https://notes.abser.top/Kubernetes-%E9%9B%86%E7%BE%A4%E7%9A%84%E9%99%8D%E6%9C%AC%E5%A2%9E%E6%95%88/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/Kubernetes-%E9%9B%86%E7%BE%A4%E7%9A%84%E9%99%8D%E6%9C%AC%E5%A2%9E%E6%95%88/</guid><description>通过 [[HPA]] 和 [[ClusterAutoscaler]] [[降本增效]]吧
[[离线混部]]也是业界主要探索的，有不少[[开源项目]]</description></item><item><title>LSMs</title><link>https://notes.abser.top/LSMs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/LSMs/</guid><description>基于日志结构的合并树</description></item><item><title>LVM 重启需要重新初始化否则丢失 vg 设备的问题</title><link>https://notes.abser.top/LVM-%E9%87%8D%E5%90%AF%E9%9C%80%E8%A6%81%E9%87%8D%E6%96%B0%E5%88%9D%E5%A7%8B%E5%8C%96%E5%90%A6%E5%88%99%E4%B8%A2%E5%A4%B1-vg-%E8%AE%BE%E5%A4%87%E7%9A%84%E9%97%AE%E9%A2%98/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/LVM-%E9%87%8D%E5%90%AF%E9%9C%80%E8%A6%81%E9%87%8D%E6%96%B0%E5%88%9D%E5%A7%8B%E5%8C%96%E5%90%A6%E5%88%99%E4%B8%A2%E5%A4%B1-vg-%E8%AE%BE%E5%A4%87%E7%9A%84%E9%97%AE%E9%A2%98/</guid><description>https://www.aboutyun.com/thread-16065-1-1.html
设置 开机挂载 ，ok了
cat /etc/rc.d/rc.local |grep cinder-volumes || echo &amp;rsquo;losetup -f /var/lib/cinder/cinder-volumes &amp;amp;&amp;amp; vgchange -a y cinder-volumes &amp;rsquo; &amp;raquo; /etc/rc.d/rc.local</description></item><item><title>maigret</title><link>https://notes.abser.top/maigret/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/maigret/</guid><description>https://github.com/soxoj/maigret</description></item><item><title>namespace</title><link>https://notes.abser.top/namespace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/namespace/</guid><description>Kubernetes 中的命名空间概念，可参考 [[Linux Namespace]]</description></item><item><title>PriceOps</title><link>https://notes.abser.top/PriceOps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/PriceOps/</guid><description>什么是 PriceOps ? 解释网址： https://priceops.org/
做一下笔记：
PriceOps 部分定义 PriceOps 是一种实现迭代和灵活性的方法。它描述了一组通过有效管理固有复杂性来促进定价模型探索的实现属性。将此视为一组架构蓝图和最佳实践，可以帮助您持续开发和完善您的定价基础架构。 PriceOps_不是_关于任何特定产品应如何定价或如何确定此类价格的规定性指南。相反，它是如何实施定价模型以最大限度地提高灵活性和稳定性的指南。 我理解如下：
将定价模型通过代码描述出来，现在是 json，因为有 code 极强的表达能力，所以可能可以从中看出定价对于产品的影响有哪些。从而做出调整。
列出了支撑模型的五个支柱（英文：[[pillar]])
定价模型的定义：例如版本化代表不会影响之前的用户 用户的时间表：这样一个定价计划就可以规定在哪些时间里面可以使用哪些功能，并能有多少使用量 计量系统：用于收集所有用户使用信息，一个数据中心中存储，来帮助定价模型的更新 权限检查：这样应用程序代码只需要提供功能，不需要知道功能在哪些计划中。 PriceOps 工具：为以上行为提供操作的工具 我很喜欢这种 [[逐步描述一个新模型的方式]]，它还能持续迭代一个东西定义，如果一开始就下结论，这个模型就老死了。</description></item><item><title>Pricing as Code</title><link>https://notes.abser.top/Pricing-as-Code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/Pricing-as-Code/</guid><description>一种很新的东西. 概念模型: [[PriceOps]] 示例产品：[[Tier]] https://www.tier.run/</description></item><item><title>Request For Comments</title><link>https://notes.abser.top/Request-For-Comments/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/Request-For-Comments/</guid><description>摘要 RFC 不能修改，有可能是错的，他从相当意义上构成了互联网的历史。标准并不总是对的。
问题、提示 主要笔记 RFC由一系列草案组成，起始于1969年（第一个RFC文档发布于1969年4月7日，参见“RFC30年”，RFC2555”） “RFC编辑者”：约翰•普斯特尔（Jon Postel）（前 30 年）现在是一个小组 从哪里开始阅读 RFC #query 查找RFC的规范位置是 RFC编辑器网站。但是，正如我们将在下面看到的那样，RFC编辑器缺少一些关键信息，因此大多数人都使用 tools.ietf.org IETF介绍及RFC Draft撰写 | Louie&amp;rsquo;s Blog</description></item><item><title>Tier</title><link>https://notes.abser.top/Tier/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/Tier/</guid><description>https://www.tier.run/ 理念： [[Pricing as Code]] 、[[PriceOps]]</description></item><item><title>web 技术发展历程</title><link>https://notes.abser.top/web-%E6%8A%80%E6%9C%AF%E5%8F%91%E5%B1%95%E5%8E%86%E7%A8%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/web-%E6%8A%80%E6%9C%AF%E5%8F%91%E5%B1%95%E5%8E%86%E7%A8%8B/</guid><description>摘要 问题、提示 主要笔记 https://www.epicweb.dev/the-webs-next-transition ：具有详尽的关于 Web 技术发展的经验和论证优缺点。以及整个 web 历史的架构，都画了图说明。 能写出来需要优秀的经验和总结能力，这篇文章写的很好。毕竟 [[Focus and Different]] 其中提到 [[SPA]] 的[[状态管理]]是一个大问题，按我的经验来说也是，[[Redux]] 等状态管理的框架，[[UI]] 的[[单向渲染逻辑]]，都是状态管理的大问题。当然核心问题就是[[缓存失效]]！毕竟缓[[存失效是软件中最困难的问题之一]]。 提到了框架 [[Remix]]，找机会学学了解下 #todo https://twitter.com/shamwhoah/status/1575619809714503681 : 还能快速在 [[chrome 的 lighthouse 测试]]中获得很高分！</description></item><item><title>不要片面的根据一部分想法下决定</title><link>https://notes.abser.top/%E4%B8%8D%E8%A6%81%E7%89%87%E9%9D%A2%E7%9A%84%E6%A0%B9%E6%8D%AE%E4%B8%80%E9%83%A8%E5%88%86%E6%83%B3%E6%B3%95%E4%B8%8B%E5%86%B3%E5%AE%9A/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E4%B8%8D%E8%A6%81%E7%89%87%E9%9D%A2%E7%9A%84%E6%A0%B9%E6%8D%AE%E4%B8%80%E9%83%A8%E5%88%86%E6%83%B3%E6%B3%95%E4%B8%8B%E5%86%B3%E5%AE%9A/</guid><description>这个事例是在日常的生活中，会想到自己如果做什么事就好了。以写日记和记录照片为例，在自己翻看的时候就会想看到自己的记录，但实际上为了这个目的养成一个记录日记，照片，整理数据库的习惯是性价比不高的。以单满足一个回忆的需求来说，在年轻的时候是价值不高的，所以不推荐做。 那么一个简短总结就是标题。</description></item><item><title>为什么我们在RocksDB上创建CockroachDB项目？</title><link>https://notes.abser.top/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E4%BB%AC%E5%9C%A8RocksDB%E4%B8%8A%E5%88%9B%E5%BB%BACockroachDB%E9%A1%B9%E7%9B%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E4%BB%AC%E5%9C%A8RocksDB%E4%B8%8A%E5%88%9B%E5%BB%BACockroachDB%E9%A1%B9%E7%9B%AE/</guid><description>https://www.cockroachlabs.com/blog/cockroachdb-on-rocksd/</description></item><item><title>使用 quartz 托管 obsidian 到网络上</title><link>https://notes.abser.top/%E4%BD%BF%E7%94%A8-quartz-%E6%89%98%E7%AE%A1-obsidian-%E5%88%B0%E7%BD%91%E7%BB%9C%E4%B8%8A/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E4%BD%BF%E7%94%A8-quartz-%E6%89%98%E7%AE%A1-obsidian-%E5%88%B0%E7%BD%91%E7%BB%9C%E4%B8%8A/</guid><description>Refer https://quartz.jzhao.xyz/notes/setup/ https://quartz.jzhao.xyz/notes/obsidian/</description></item><item><title>分布式</title><link>https://notes.abser.top/%E5%88%86%E5%B8%83%E5%BC%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E5%88%86%E5%B8%83%E5%BC%8F/</guid><description>[[巨石应用]] 其实也能满足老旧小公司的需求，只是技术含量跟不上时代罢了。
其实真正需要的是低成本，灵活性，随取随用，轻松连接，这也是云时代的需求。</description></item><item><title>基础设施的培育</title><link>https://notes.abser.top/%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E7%9A%84%E5%9F%B9%E8%82%B2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E7%9A%84%E5%9F%B9%E8%82%B2/</guid><description>摘要 问题、提示 主要笔记 [[Hashicorp]] 现在就像是 [[IaaS]] 行业的标准了，但是现在我们需要的是各个行业的细分标准的确立 像 [[altogic]] 这样的软件服务，只要[[IaaS|基础设施即服务]]能够做好，上层这些应用构建都不太难。 [[行业的细分标准-基础设施层|如何定义当前行业的细分标准]]？ 不清楚，现在要做的是尝试去做这方面的工作。以快速提供一个 [[firestore]] 类似服务的框架为载体探究一下如何完成这件事。</description></item><item><title>存储领域的事件</title><link>https://notes.abser.top/%E5%AD%98%E5%82%A8%E9%A2%86%E5%9F%9F%E7%9A%84%E4%BA%8B%E4%BB%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E5%AD%98%E5%82%A8%E9%A2%86%E5%9F%9F%E7%9A%84%E4%BA%8B%E4%BB%B6/</guid><description>摘要 问题、提示 全球存储发展的几大趋势：分布式、云化、[[闪存化]]、[[存储领域的智能化|智能]] 主要笔记 事件 2010年：EMC收购Isilon，22.5亿美元 ;
2010年：惠普收购3Par，23.5亿美元 ;
2011年：戴尔收购Compellent，9.6亿美元 ;
2011年：[[希捷]]收购[[三星]]硬盘，13.75亿美元 ;
2011年：[[西部数据]]收购日立GST，48亿美元 ;
2012年：[[VMware]]提出[[SDDC（软件定义数据中心）]]和[[SDS（软件定义存储）]]的概念，之后推出SDS产品 – Virtual SAN的预览版
2013年：Avago收购LSI，66亿美元 ;
2014年：闪迪收购Fusion-io，11亿美元 ;
2015年：戴尔收购EMC，630亿美元 ;
2015年：[[西部数据]]收购闪迪，160亿美元 ;
2016年：IBM收购对象存储，约13亿美元 ;
2016年：[[HCI]]（超融合）概念提出者[[Nutanix]]上市；
2016年：博通收购博科，59亿美元 ;
2016年：OpenText收购Dell EMC企业内容部门(包括Documentum等)，16.2亿美元 ;
2017年：HPE收购Nimble Storage，10.9亿美元 ;</description></item><item><title>性能调优</title><link>https://notes.abser.top/%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/</guid><description>在非分布式时代，单机性能调优还有些作用。在云上时代，除非没钱需要[[降本增效]]，不然加机器加配置就行。相对于商业价值来说，一般的硬件成本占比较低。</description></item><item><title>旅行的本质</title><link>https://notes.abser.top/%E6%97%85%E8%A1%8C%E7%9A%84%E6%9C%AC%E8%B4%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E6%97%85%E8%A1%8C%E7%9A%84%E6%9C%AC%E8%B4%A8/</guid><description>用异化思想去思考： 旅行的本质是
个人远离他们文化的真实道路 深入未知的深处重塑自我 然后将这种学习带回他们的文化，这样它就可以发展 旅行就是人类的一种[[离群算法]]应用，另一种应用是学习具有稀缺性的技能 [[学习稀缺的技能]]
为什么小说里的英雄冒险那么吸引人 -&amp;gt; [[英雄之旅]]</description></item><item><title>清理 GIt 中的历史文件</title><link>https://notes.abser.top/%E6%B8%85%E7%90%86-GIt-%E4%B8%AD%E7%9A%84%E5%8E%86%E5%8F%B2%E6%96%87%E4%BB%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E6%B8%85%E7%90%86-GIt-%E4%B8%AD%E7%9A%84%E5%8E%86%E5%8F%B2%E6%96%87%E4%BB%B6/</guid><description>1 git filter-branch --force --index-filter &amp;#39;git rm --cached --ignore-unmatch path-to-your-remove-file&amp;#39; --prune-empty --tag-name-filter cat -- --all 其中, path-to-your-remove-file 就是你要删除的文件的相对路径(相对于git仓库的跟目录), 替换成你要删除的文件即可. 注意一点，这里的文件或文件夹，都不能以 &amp;lsquo;/&amp;rsquo; 开头，否则文件或文件夹会被认为是从 git 的安装目录开始。
如果你要删除的目标不是文件，而是文件夹，那么请在 git rm --cached 命令后面添加 -r 命令，表示递归的删除（子）文件夹和文件夹下的文件，类似于 rm -rf 命令。
更多请参考： https://help.github.com/articles/remove-sensitive-data</description></item><item><title>生活没有意义？</title><link>https://notes.abser.top/%E7%94%9F%E6%B4%BB%E6%B2%A1%E6%9C%89%E6%84%8F%E4%B9%89/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E7%94%9F%E6%B4%BB%E6%B2%A1%E6%9C%89%E6%84%8F%E4%B9%89/</guid><description>参见我的 [[Focus and Different]] 原则</description></item><item><title>私有云</title><link>https://notes.abser.top/%E7%A7%81%E6%9C%89%E4%BA%91/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E7%A7%81%E6%9C%89%E4%BA%91/</guid><description>摘要 问题、提示 主要笔记 [[HCI|超融合]] 可以视为私有云的一种部署形态</description></item><item><title>端口占用问题</title><link>https://notes.abser.top/%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E9%97%AE%E9%A2%98/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E9%97%AE%E9%A2%98/</guid><description>摘要 ps -ef | grep then netstat -anp | grep pid lsof -i:port_num 主要笔记 netstat netstat -tunlp 用于显示 tcp，udp 的端口和进程等相关情况。 netstat 查看端口占用语法格式： netstat -tunlp | grep 端口号
-t (tcp) 仅显示tcp相关选项 -u (udp)仅显示udp相关选项 -n 拒绝显示别名，能显示数字的全部转化为数字 -l 仅列出在Listen(监听)的服务状态 -p 显示建立相关链接的程序名</description></item><item><title>英雄之旅</title><link>https://notes.abser.top/%E8%8B%B1%E9%9B%84%E4%B9%8B%E6%97%85/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E8%8B%B1%E9%9B%84%E4%B9%8B%E6%97%85/</guid><description>英雄之旅就是人类社会中的最常见的原型神话。
![[Pasted image 20220929203142.png]]![[Pasted image 20220929203529.png]]</description></item><item><title>逐步描述一个新模型的方式</title><link>https://notes.abser.top/%E9%80%90%E6%AD%A5%E6%8F%8F%E8%BF%B0%E4%B8%80%E4%B8%AA%E6%96%B0%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%96%B9%E5%BC%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E9%80%90%E6%AD%A5%E6%8F%8F%E8%BF%B0%E4%B8%80%E4%B8%AA%E6%96%B0%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%96%B9%E5%BC%8F/</guid><description>通过描述一个东西，能提供什么，能做什么来感知他。
不要急着下定义，这会让自己丧失求知欲。
有点像编程领域的[[鸭子类型]]的延伸。</description></item><item><title>降本增效</title><link>https://notes.abser.top/%E9%99%8D%E6%9C%AC%E5%A2%9E%E6%95%88/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E9%99%8D%E6%9C%AC%E5%A2%9E%E6%95%88/</guid><description>新词，顾名思义
和大环境也有关，[[diary/2022-10-12]] 记录：由于[[疫情]]原因，全球[[经济]]都有萎缩的倾向，大部分企业寻求降本增效来活下去。
[[Kubernetes 集群的降本增效]]</description></item><item><title>鸭子类型</title><link>https://notes.abser.top/%E9%B8%AD%E5%AD%90%E7%B1%BB%E5%9E%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E9%B8%AD%E5%AD%90%E7%B1%BB%E5%9E%8B/</guid><description>同 Duck-Type
原理是：只要一个东西会“嘎嘎”叫，就认为它是一只鸭子。</description></item></channel></rss>