<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>🎁首页 on</title><link>https://notes.abser.top/</link><description>Recent content in 🎁首页 on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://notes.abser.top/index.xml" rel="self" type="application/rss+xml"/><item><title>Configmap/Secret Manager</title><link>https://notes.abser.top/blogs/Configmap-Secret-Manager/</link><pubDate>Fri, 05 Aug 2016 20:20:56 -0400</pubDate><guid>https://notes.abser.top/blogs/Configmap-Secret-Manager/</guid><description>Configmap/Secret Manager
ReadLink configmap manager pkg/kubelet/secret/secret_manager.go Configmap Manager 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // Manager interface provides methods for Kubelet to manage ConfigMap. type Manager interface { // Get configmap by configmap namespace and name.</description></item><item><title>How Cloud Develop Kit from Google designed the docstore interface</title><link>https://notes.abser.top/blogs/How-Cloud-Develop-Kit-from-Google-designed-the-docstore-interface/</link><pubDate>Fri, 05 Aug 2016 20:20:56 -0400</pubDate><guid>https://notes.abser.top/blogs/How-Cloud-Develop-Kit-from-Google-designed-the-docstore-interface/</guid><description>How [[Cloud Develop Kit]] from Google designed the docstore interface
Refer Docstore · Go CDK urls.go - google/go-cloud - Sourcegraph driver.go - Go Design objectives: through the abstraction layer, we can mask differences, provide services in a standardized way, and configure business applications through description files.</description></item><item><title>Node Status Manager</title><link>https://notes.abser.top/blogs/Node-Status-Manager/</link><pubDate>Fri, 05 Aug 2016 20:20:56 -0400</pubDate><guid>https://notes.abser.top/blogs/Node-Status-Manager/</guid><description>Node Status Manager
ReadLink pkg/kubelet/nodestatus/setters.go / pkg / kubelet / kubelet_node_status.go
Directory Layout 1 2 3 pkg/kubelet/nodestatus |- setters.go |- setters_test.go
Setter 1 2 3 // Setter modifies the node in-place, and returns an error if the modification failed.</description></item><item><title>Open Source History of Dapr project</title><link>https://notes.abser.top/blogs/Open-Source-History-of-Dapr-project/</link><pubDate>Fri, 05 Aug 2016 20:20:56 -0400</pubDate><guid>https://notes.abser.top/blogs/Open-Source-History-of-Dapr-project/</guid><description>[[## Open Source]] History of [[Dapr]] project
At the beginning of this open-source column, I wrote this article to describe the birth and development of open-source projects, express my views on the open-source community and ecology, and share it with you.</description></item><item><title>React Hooks State Persistence</title><link>https://notes.abser.top/blogs/React-Hooks-State-Persistence/</link><pubDate>Fri, 05 Aug 2016 20:20:56 -0400</pubDate><guid>https://notes.abser.top/blogs/React-Hooks-State-Persistence/</guid><description>本文讲述如何分析设计 通过 [[React Hooks]] 进行 State 持久化管理
分析 正常前端，组件为类文件，自己维持状态，不易复用。
首先把组件中的 [[UI]] 和 状态分开，用 Action 连接，如下图。
![[blogs/Pasted image 20221011190847.png]]
Action 是[[算子]]
Function 则可成为以下函数
UI = f(S)
状态驱动组件重新渲染 UI
Scu =f(Sc, ∆)
组件会用到的 Scu 和 更改 Sc 的 ∆ 方法决定。</description></item><item><title>Role of microservice framework</title><link>https://notes.abser.top/blogs/Role-of-microservice-framework/</link><pubDate>Fri, 05 Aug 2016 20:20:56 -0400</pubDate><guid>https://notes.abser.top/blogs/Role-of-microservice-framework/</guid><description>Role of [[microservice framework]] HTTP Channel and [[GRPC]] Channel before we begin, let&amp;rsquo;s explore the differences between HTTP and RPC. The reason why gRPC is discussed here is that no one uses common RPC.
HTTP is a common communication method used for business coding, and its popularity is needless to say.</description></item><item><title>Technician and experiencer</title><link>https://notes.abser.top/blogs/Technician-and-experiencer/</link><pubDate>Fri, 05 Aug 2016 20:20:56 -0400</pubDate><guid>https://notes.abser.top/blogs/Technician-and-experiencer/</guid><description>Technician and experiencer We believe that the experience of the experience is linked to the actual things and actual behaviors, while the technology of the technician symbolizes more general knowledge.
First of all, in practical operation, it can be seen that skilled people are inferior to experienced people in all aspects, but they usually do better than inexperienced people.</description></item><item><title>TokenBucket</title><link>https://notes.abser.top/blogs/TokenBucket/</link><pubDate>Fri, 05 Aug 2016 20:20:56 -0400</pubDate><guid>https://notes.abser.top/blogs/TokenBucket/</guid><description>TokenBucket Overview ![image.png]( https://cdn.hashnode.com/res/hashnode/image/upload/v1657442131915/dUeLDBuYM.png align=&amp;ldquo;left&amp;rdquo;)
available per second Limit put tokens into the bucket, or, every time 1/Limit add a token to the second bucket maximum storage in buckets burst tokens. If the bucket is full, the new token will be discarded.</description></item><item><title/><link>https://notes.abser.top/Golang/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/Golang/</guid><description/></item><item><title/><link>https://notes.abser.top/protobuf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/protobuf/</guid><description/></item><item><title/><link>https://notes.abser.top/%E7%A6%BB%E7%BE%A4%E7%AE%97%E6%B3%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E7%A6%BB%E7%BE%A4%E7%AE%97%E6%B3%95/</guid><description/></item><item><title>2022-09-28</title><link>https://notes.abser.top/diary/2022-09-28/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/diary/2022-09-28/</guid><description> #todo * * #journal 17:50 离群的特异学习会远离共识，共识通常是正确的，因此稀有的技能选择存在巨大的风险，为了降低风险，我们必须保持谦虚。 18:10 看到一篇很好的关于选择学习什么技能的文章： https://medium.com/accelerated-intelligence/while-most-people-fight-to-learn-in-demand-skills-smart-people-are-secretly-learning-rare-skills-f9b26856c9d6 学习笔记：[[为什么学习稀缺的技能]]</description></item><item><title>2022-09-29</title><link>https://notes.abser.top/diary/2022-09-29/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/diary/2022-09-29/</guid><description> #todo * *
#journal
15:34 添加测试
20:23 memory 真好用，可以用来吐槽，就是没有发送快捷键
20:25 最近需要思考学点什么东西。把昨天的博客看完吧
20:30 学术文章
我领域之外的学科，其他人甚至都不知道
许可专有数据
与可能不会公开分享某些见解的领域内部人士建立深厚的关系
心智模型（难以评估的抽象值） 这些才是应该在我们的日常学习中去学习的东西，总结的面很到位。因为稀缺性，才有放大的价格。 ^cff4f1</description></item><item><title>2022-09-30</title><link>https://notes.abser.top/diary/2022-09-30/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/diary/2022-09-30/</guid><description> #todo golang devcloud 使用 minio 学习稀有技能的进一步研究，找一个目标 [[为什么学习稀缺的技能]] #journal ^e61eca</description></item><item><title>2022-10-08</title><link>https://notes.abser.top/diary/2022-10-08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/diary/2022-10-08/</guid><description>[[buildkit]] 高策写过 buildkit 的使用体验，在他的 [[envd]] 的工作中 ^42517f 新 [[Dockerfile]] 语法特性：buildkit 可以通过 docker buildx build 解析新的语法特性。from [[2022-10-08#^42517f]] 多次 build 之间的缓存 RUN --mount=type=cache,target=/root/.cache/pip pip install ... 多体系架构的支持 docker buildx build --platform linux/amd64,linux/arm64 . 多行脚本 [[Dockerfile 多行脚本]] 只增加一个构建层 [[rocksdb]] 是单节点 KV 数据库, 设计基于 [[LSMs]] .</description></item><item><title>2022-10-09</title><link>https://notes.abser.top/diary/2022-10-09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/diary/2022-10-09/</guid><description>尝试使用软件进行思路的梳理，现在是个人时间看板的梳理。[[MnicTime]] 这个软件是可以记录所有的软件的时间的。手机 iPhone 也可以记录软件使用时间。 不能像上面流水线记录，不然跟不上思路。总结然后记录：
目的：需要找到哪些是可以优化的时间习惯。 通过目前对自我的观察：
各种群聊的聊天，然后发消息，消耗了部分时间 消磨时间的操作，这部分时间应该属于可以优化的。 最后是因为好奇心去看文章的时间 三类大时间中，首先优化聊天时间，去掉大部分要进入查看的群聊即可，感觉很简单嘛。
[[使用 quartz 托管 obsidian 到网络上]]
[[清理 GIt 中的历史文件]]</description></item><item><title>2022-10-10</title><link>https://notes.abser.top/diary/2022-10-10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/diary/2022-10-10/</guid><description>[[Pricing as Code]] 是[[Tier]]这个产品使用的理念。</description></item><item><title>2022-10-11</title><link>https://notes.abser.top/diary/2022-10-11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/diary/2022-10-11/</guid><description/></item><item><title>ConfigMap</title><link>https://notes.abser.top/ConfigMap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/ConfigMap/</guid><description>Kubernetes 中的一个对象。可以理解为一个 yaml 文件专门用作 APP 的配置文件，提供了相应的
挂载 监控更新 等功能。 限制：只有 1m 大小</description></item><item><title>Dockerfile 多行脚本</title><link>https://notes.abser.top/Dockerfile-%E5%A4%9A%E8%A1%8C%E8%84%9A%E6%9C%AC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/Dockerfile-%E5%A4%9A%E8%A1%8C%E8%84%9A%E6%9C%AC/</guid><description>1 2 3 4 5 6 7 8 # syntax = docker/dockerfile:1.4 FROM debian -RUN apt-get &amp;amp;&amp;amp; \ - apt-get install -y vim +RUN &amp;lt;&amp;lt;eot bash + apt-get update + apt-get install -y vim eot</description></item><item><title>Go</title><link>https://notes.abser.top/Go/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/Go/</guid><description>[[Golang]] 的简写，一门计算机语言，[[我]]比较擅长。</description></item><item><title>hugo-extended</title><link>https://notes.abser.top/hugo-extended/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/hugo-extended/</guid><description>hugo 安装网址： https://gohugo.io/getting-started/installing/
windows 我直接使用了安装
1 scoop install hugo-extended</description></item><item><title>hugo-obsidian</title><link>https://notes.abser.top/hugo-obsidian/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/hugo-obsidian/</guid><description>使用 [[Golang]] install 功能安装
1 2 # Install and link `hugo-obsidian` locally go install github.com/jackyzha0/hugo-obsidian@latest</description></item><item><title>LSMs</title><link>https://notes.abser.top/LSMs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/LSMs/</guid><description>基于日志结构的合并树</description></item><item><title>LVM 重启需要重新初始化否则丢失 vg 设备的问题</title><link>https://notes.abser.top/LVM-%E9%87%8D%E5%90%AF%E9%9C%80%E8%A6%81%E9%87%8D%E6%96%B0%E5%88%9D%E5%A7%8B%E5%8C%96%E5%90%A6%E5%88%99%E4%B8%A2%E5%A4%B1-vg-%E8%AE%BE%E5%A4%87%E7%9A%84%E9%97%AE%E9%A2%98/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/LVM-%E9%87%8D%E5%90%AF%E9%9C%80%E8%A6%81%E9%87%8D%E6%96%B0%E5%88%9D%E5%A7%8B%E5%8C%96%E5%90%A6%E5%88%99%E4%B8%A2%E5%A4%B1-vg-%E8%AE%BE%E5%A4%87%E7%9A%84%E9%97%AE%E9%A2%98/</guid><description>https://www.aboutyun.com/thread-16065-1-1.html
设置 开机挂载 ，ok了
cat /etc/rc.d/rc.local |grep cinder-volumes || echo &amp;rsquo;losetup -f /var/lib/cinder/cinder-volumes &amp;amp;&amp;amp; vgchange -a y cinder-volumes &amp;rsquo; &amp;raquo; /etc/rc.d/rc.local</description></item><item><title>maigret</title><link>https://notes.abser.top/maigret/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/maigret/</guid><description>https://github.com/soxoj/maigret</description></item><item><title>namespace</title><link>https://notes.abser.top/namespace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/namespace/</guid><description>Kubernetes 中的命名空间概念，可参考 [[Linux Namespace]]</description></item><item><title>obsidian</title><link>https://notes.abser.top/obsidian/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/obsidian/</guid><description/></item><item><title>PriceOps</title><link>https://notes.abser.top/PriceOps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/PriceOps/</guid><description>什么是 PriceOps ? 解释网址： https://priceops.org/
做一下笔记：
PriceOps 部分定义 PriceOps 是一种实现迭代和灵活性的方法。它描述了一组通过有效管理固有复杂性来促进定价模型探索的实现属性。将此视为一组架构蓝图和最佳实践，可以帮助您持续开发和完善您的定价基础架构。 PriceOps_不是_关于任何特定产品应如何定价或如何确定此类价格的规定性指南。相反，它是如何实施定价模型以最大限度地提高灵活性和稳定性的指南。 我理解如下：
将定价模型通过代码描述出来，现在是 json，因为有 code 极强的表达能力，所以可能可以从中看出定价对于产品的影响有哪些。从而做出调整。
列出了支撑模型的五个支柱（英文：[[pillar]])
定价模型的定义：例如版本化代表不会影响之前的用户 用户的时间表：这样一个定价计划就可以规定在哪些时间里面可以使用哪些功能，并能有多少使用量 计量系统：用于收集所有用户使用信息，一个数据中心中存储，来帮助定价模型的更新 权限检查：这样应用程序代码只需要提供功能，不需要知道功能在哪些计划中。 PriceOps 工具：为以上行为提供操作的工具 我很喜欢这种 [[逐步描述一个新模型的方式]]，它还能持续迭代一个东西定义，如果一开始就下结论，这个模型就老死了。</description></item><item><title>Pricing as Code</title><link>https://notes.abser.top/Pricing-as-Code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/Pricing-as-Code/</guid><description>一种很新的东西. 概念模型: [[PriceOps]] 示例产品：[[Tier]] https://www.tier.run/</description></item><item><title>rocksdb</title><link>https://notes.abser.top/rocksdb/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/rocksdb/</guid><description/></item><item><title>Tier</title><link>https://notes.abser.top/Tier/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/Tier/</guid><description>https://www.tier.run/ 理念： [[Pricing as Code]] 、[[PriceOps]]</description></item><item><title>为什么学习稀缺的技能</title><link>https://notes.abser.top/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AD%A6%E4%B9%A0%E7%A8%80%E7%BC%BA%E7%9A%84%E6%8A%80%E8%83%BD/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AD%A6%E4%B9%A0%E7%A8%80%E7%BC%BA%E7%9A%84%E6%8A%80%E8%83%BD/</guid><description>应用异常值算法的困难正是这样做的原因！更困难意味着更稀有。
为了帮助您开始应对这些挑战，以下是我一遍又一遍地回顾的四个经验法则。虽然只有四个，但它们的冲击力很大。它们是数百小时思考如何更好地找到稀有和有价值的技能的简化：
成为第一个学习有价值的技能的人。 跟踪新兴科学、技术、应用程序、工具、行业和领域。当它们呈指数增长时，花几个小时探索它们，看看是否值得投入更多时间。它可以帮助您尝试新事物，而不会将时间浪费在变成无用的事物上。 学习很难的有价值的技能。 愿意投资于禁忌、不是超级性感的、耗时、费力、看起来有风险或超级技术或学术的领域。 学习具有隐藏好处的宝贵技能。 人类有价值盲点。他们低估了具有抽象、长期回报的技能；微技能；其他学科的技能；和被遗忘的经典思想。 重新定义价值比共识更好。 在我们的职业生涯中，我们利用我们的技能为他人服务。可能是客户、老板、我们的粉丝、招聘人员或其他人。如果您能够比其他人更好地了解您所服务的人的未满足需求，您将能够更好地满足这些需求。 或者，简而言之，请记住：
成为第一 面对困难 寻找隐藏的好处 重新定义价值 以上是 Michael Simomons 的学习稀有技能的理论，其中总结的几点我们应该尝试的规则，在他的规则下，他指导有如下学习资源（随个人的情景可以有变种，这是当然的） ![[2022-09-29#^cff4f1]]
第一步，解释：我们现在从规则开始解释，从而找到我们自己情景下的学习 首先，所有的技能都很有价值，然后我们要去寻找稀缺性的技能。这个前提是我们先找到有价值的技能，通过一个指数增长的模型判断一个事物发展是否超出常规，这通常都代表这件事有价值。那我们以程序员的视角举例， Web3 正好是急需技能之一（因为需求而有价值），物联网，边缘方面的技能也并驾齐驱。 然后我们去寻找技能的稀缺性！（因为稀缺性决定价格）这也有一个模型来描述他，即被禁止的，未被大部分人发现的，可能枯燥的，耗时，费力的，或者看起来非常有风险的，以及非常学术的，非常技术专业的领域。（毕竟你不能指望一蹴而就的领域有多稀缺，信息差是很难一直保持的） 同时不要忽视长期的被动技能，复利主义，以及一些经典思想，他们由于长期存在于我们的身边，会被我们的价值评估器忽视。以抽象的，长期回报的技能为例：写笔记，坚持总结输出；微技能，一些工作上的小技巧，比如电脑使用领域上的一些工具快捷键；其他领域的技能！ 往往会产生巨大的化学反应，比如生物对计算机领域的影响，当然我还是建议学数学，比如金融割韭菜融入区块链；以及一些经典思想：分治和中间层的思想贯彻整个计算机科学，经常发现计算机的一些新领域应用了老的经典的思想从而大放异彩，比如深度学习啦！ 重新定义价值而非共识，这句类比对一个行业需求的深挖。技能可以为每一个使用者提供相同影响的结果，但精准的需求分析和挖掘，能让某项技能发掘出更多的价值，他提升了价值的同时也提升了稀缺性。 当然，以上规则其实主要是个人视角出发，如何发挥个人最大的影响力的思考，从团队等方向还能有更多，比如规模效应，然而我们希望将讨论范围限制在个人视角上以期提供一些切实的指导。
道理的扩散成本是非常低的，但是让一个人相信这个道理的成本是极高的。 第二步 分析学习资源的新变化 考虑稀缺性前 后 阅读最新的畅销书 学术论文 时刻检查社交媒体查看最具影响力的人的发言 领域之外的学科（加密学、经济学） 时刻保持关注行业最新的新闻（所有人都在关注） 获取一些专有数据的授权并研究 和领域内部人士建立深厚的关系（并且他们很少公开分享自己的观点 一些抽象的心理模型 可以看到其中明显的差距，同样的例子还有很多，就不一一列举了。笔者这里最想强调的还是稀缺代表远离共识，意味着你的选择几乎总是错的（即使你是个顶尖聪明的人），这是需要谦虚的态度，避免一次投入过多，需要有足够多的证据、验证。所以保持谦虚，离群才能尽量保证个人的稳定。</description></item><item><title>为什么我们在RocksDB上创建CockroachDB项目？</title><link>https://notes.abser.top/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E4%BB%AC%E5%9C%A8RocksDB%E4%B8%8A%E5%88%9B%E5%BB%BACockroachDB%E9%A1%B9%E7%9B%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E4%BB%AC%E5%9C%A8RocksDB%E4%B8%8A%E5%88%9B%E5%BB%BACockroachDB%E9%A1%B9%E7%9B%AE/</guid><description>https://www.cockroachlabs.com/blog/cockroachdb-on-rocksd/</description></item><item><title>使用 quartz 托管 obsidian 到网络上</title><link>https://notes.abser.top/%E4%BD%BF%E7%94%A8-quartz-%E6%89%98%E7%AE%A1-obsidian-%E5%88%B0%E7%BD%91%E7%BB%9C%E4%B8%8A/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E4%BD%BF%E7%94%A8-quartz-%E6%89%98%E7%AE%A1-obsidian-%E5%88%B0%E7%BD%91%E7%BB%9C%E4%B8%8A/</guid><description>Refer https://quartz.jzhao.xyz/notes/setup/ https://quartz.jzhao.xyz/notes/obsidian/</description></item><item><title>旅行的本质</title><link>https://notes.abser.top/%E6%97%85%E8%A1%8C%E7%9A%84%E6%9C%AC%E8%B4%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E6%97%85%E8%A1%8C%E7%9A%84%E6%9C%AC%E8%B4%A8/</guid><description>用异化思想去思考： 旅行的本质是
个人远离他们文化的真实道路 深入未知的深处重塑自我 然后将这种学习带回他们的文化，这样它就可以发展 旅行就是人类的一种[[离群算法]]应用，另一种应用是学习具有稀缺性的技能 [[为什么学习稀缺的技能]]
为什么小说里的英雄冒险那么吸引人 -&amp;gt; [[英雄之旅]]</description></item><item><title>清理 GIt 中的历史文件</title><link>https://notes.abser.top/%E6%B8%85%E7%90%86-GIt-%E4%B8%AD%E7%9A%84%E5%8E%86%E5%8F%B2%E6%96%87%E4%BB%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E6%B8%85%E7%90%86-GIt-%E4%B8%AD%E7%9A%84%E5%8E%86%E5%8F%B2%E6%96%87%E4%BB%B6/</guid><description>1 git filter-branch --force --index-filter &amp;#39;git rm --cached --ignore-unmatch path-to-your-remove-file&amp;#39; --prune-empty --tag-name-filter cat -- --all 其中, path-to-your-remove-file 就是你要删除的文件的相对路径(相对于git仓库的跟目录), 替换成你要删除的文件即可. 注意一点，这里的文件或文件夹，都不能以 &amp;lsquo;/&amp;rsquo; 开头，否则文件或文件夹会被认为是从 git 的安装目录开始。
如果你要删除的目标不是文件，而是文件夹，那么请在 git rm --cached 命令后面添加 -r 命令，表示递归的删除（子）文件夹和文件夹下的文件，类似于 rm -rf 命令。
更多请参考： https://help.github.com/articles/remove-sensitive-data</description></item><item><title>英雄之旅</title><link>https://notes.abser.top/%E8%8B%B1%E9%9B%84%E4%B9%8B%E6%97%85/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E8%8B%B1%E9%9B%84%E4%B9%8B%E6%97%85/</guid><description>英雄之旅就是人类社会中的最常见的原型神话。
![[Pasted image 20220929203142.png]]![[Pasted image 20220929203529.png]]</description></item><item><title>逐步描述一个新模型的方式</title><link>https://notes.abser.top/%E9%80%90%E6%AD%A5%E6%8F%8F%E8%BF%B0%E4%B8%80%E4%B8%AA%E6%96%B0%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%96%B9%E5%BC%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E9%80%90%E6%AD%A5%E6%8F%8F%E8%BF%B0%E4%B8%80%E4%B8%AA%E6%96%B0%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%96%B9%E5%BC%8F/</guid><description>通过描述一个东西，能提供什么，能做什么来感知他。
不要急着下定义，这会让自己丧失求知欲。
有点像编程领域的[[鸭子类型]]的延伸。</description></item><item><title>鸭子类型</title><link>https://notes.abser.top/%E9%B8%AD%E5%AD%90%E7%B1%BB%E5%9E%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E9%B8%AD%E5%AD%90%E7%B1%BB%E5%9E%8B/</guid><description>同 Duck-Type
原理是：只要一个东西会“嘎嘎”叫，就认为它是一只鸭子。</description></item></channel></rss>