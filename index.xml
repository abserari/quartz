<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>🎁首页 on</title><link>https://notes.abser.top/</link><description>Recent content in 🎁首页 on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://notes.abser.top/index.xml" rel="self" type="application/rss+xml"/><item><title>使用 ssh-copy-id 工具自动上传公钥实现 ssh 连接不输入密码</title><link>https://notes.abser.top/%E4%BD%BF%E7%94%A8-ssh-copy-id-%E5%B7%A5%E5%85%B7%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E5%85%AC%E9%92%A5%E5%AE%9E%E7%8E%B0-ssh-%E8%BF%9E%E6%8E%A5%E4%B8%8D%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81/</link><pubDate>Fri, 16 Dec 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E4%BD%BF%E7%94%A8-ssh-copy-id-%E5%B7%A5%E5%85%B7%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E5%85%AC%E9%92%A5%E5%AE%9E%E7%8E%B0-ssh-%E8%BF%9E%E6%8E%A5%E4%B8%8D%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81/</guid><description>一键，非常轻松
1 2 3 4 5 6 7 8 9 10 11 12 13 14 ❯ ssh-copy-id root@10.131.200.144 /usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: &amp;#34;/home/abser/.ssh/id_rsa.pub&amp;#34; /usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed /usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys root@10.</description></item><item><title>mac 设置永久路由，同时访问内外网</title><link>https://notes.abser.top/mac-%E8%AE%BE%E7%BD%AE%E6%B0%B8%E4%B9%85%E8%B7%AF%E7%94%B1%E5%90%8C%E6%97%B6%E8%AE%BF%E9%97%AE%E5%86%85%E5%A4%96%E7%BD%91/</link><pubDate>Thu, 15 Dec 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/mac-%E8%AE%BE%E7%BD%AE%E6%B0%B8%E4%B9%85%E8%B7%AF%E7%94%B1%E5%90%8C%E6%97%B6%E8%AE%BF%E9%97%AE%E5%86%85%E5%A4%96%E7%BD%91/</guid><description>[[2022-12-15]] 今天想起来以前设置了路由没有记笔记：
mac 添加永久路由的方法
查看网卡名称列表 networksetup -listallnetworkservices 设置路由：networksetup -setadditionalroutes &amp;quot;AX1862&amp;quot; 172.11.0.0 255.255.255.0 172.16.198.1 192.160.0.0 255.255.255.0 172.16.198.1 代表为指定网卡添加路由，网卡名称由第一条命令查询，依次是目的 IP，子关掩码，目标网关（通常是你的路由器的地址，可以从自己的 IPV4 连接状态中获取）。 查看添加的路由 networksetup -getadditionalroutes &amp;quot;AX1862&amp;quot; 清空路由表 networksetup -setadditionalroutes &amp;quot;AX1862&amp;quot; 常规方法就是使用 route 命令。
需要注意，mac 上设置默认网卡的方式是通过打开网络连接设置，然后通过调整多个网络之间的顺序来完成的。
所以要达到内外网同时访问的目的，可以设置内网的特定网卡路由，并把外网的网卡顺序置顶。</description></item><item><title>git 配置多个提交用户自动匹配切换</title><link>https://notes.abser.top/git-%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AA%E6%8F%90%E4%BA%A4%E7%94%A8%E6%88%B7%E8%87%AA%E5%8A%A8%E5%8C%B9%E9%85%8D%E5%88%87%E6%8D%A2/</link><pubDate>Wed, 14 Dec 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/git-%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AA%E6%8F%90%E4%BA%A4%E7%94%A8%E6%88%B7%E8%87%AA%E5%8A%A8%E5%8C%B9%E9%85%8D%E5%88%87%E6%8D%A2/</guid><description>摘要 from： 如何配置多个提交用户？ - Git 进阶指南 Conditional Includes
在 git 2.13 版本中，增加了 conditional includes 配置，可以创建多个 gitconfig 文件，并针对不同的根目录使用不同的配置文件。例如，以下全局配置文件 ~/.gitconfig 中包含以下用户配置信息，当项目 clone 在 ~/dev/ 目录下时，会自动使用另外一份配置文件：
1 2 3 4 5 6 7 8 9 [user] name = Your Name email = your_email@example.</description></item><item><title>KDE 窗口黑边，窗口管理器 Kwin 需要重启</title><link>https://notes.abser.top/KDE-%E7%AA%97%E5%8F%A3%E9%BB%91%E8%BE%B9%E7%AA%97%E5%8F%A3%E7%AE%A1%E7%90%86%E5%99%A8-Kwin-%E9%9C%80%E8%A6%81%E9%87%8D%E5%90%AF/</link><pubDate>Mon, 12 Dec 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/KDE-%E7%AA%97%E5%8F%A3%E9%BB%91%E8%BE%B9%E7%AA%97%E5%8F%A3%E7%AE%A1%E7%90%86%E5%99%A8-Kwin-%E9%9C%80%E8%A6%81%E9%87%8D%E5%90%AF/</guid><description>摘要 输入命令可以通过 alt+f2 或者 alt+space 快捷键唤出快捷烂直接输入运行。 窗口卡死，没法切换了，通过命令 kwin_x11 --place 重启 kwin 解决 如果是 plasmashell 问题可以用 kquitapp5 plasmashell &amp;amp;&amp;amp; kstart5 plasmashell 或者 plasmashell --place 。
如果还没法解决，直接重启整个图形界面吧。 sudo systemctl restart display-manager</description></item><item><title>WebAssembly 为什么很快</title><link>https://notes.abser.top/WebAssembly-%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BE%88%E5%BF%AB/</link><pubDate>Mon, 05 Dec 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/WebAssembly-%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BE%88%E5%BF%AB/</guid><description>摘要 相比于正常程序，解析-编译 + 优化-再优化（Re-optimizing）-执行-垃圾回收。字节码程序的环境是解码-编译+优化-执行，少了环节，并且同一环节更高效
主要笔记</description></item><item><title>desmos</title><link>https://notes.abser.top/desmos/</link><pubDate>Wed, 23 Nov 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/desmos/</guid><description>摘要 用于可视化数学知识的非常好的工具
主要笔记 Desmos | 免费领略数学之美 发现的地方： An Easier-to-Use Sine Bar / Jacob Rus / Observable</description></item><item><title>github 上传 ssh-key 后仍须输入密码</title><link>https://notes.abser.top/github-%E4%B8%8A%E4%BC%A0-ssh-key-%E5%90%8E%E4%BB%8D%E9%A1%BB%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81/</link><pubDate>Wed, 23 Nov 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/github-%E4%B8%8A%E4%BC%A0-ssh-key-%E5%90%8E%E4%BB%8D%E9%A1%BB%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81/</guid><description>摘要 .git/config 文件写明了通过 http 协议，没有走 ssh url = https://github.com/Name/project.git 改为 url = git@github.com:Name/project.git
只想走 ssh 协议。from： Git - git-config Documentation
1 git config --global url.ssh://git@github.com/.insteadOf https://github.com/ 测试连通性 1 ssh -T git@github.com</description></item><item><title>容器的一号进程</title><link>https://notes.abser.top/%E5%AE%B9%E5%99%A8%E7%9A%84%E4%B8%80%E5%8F%B7%E8%BF%9B%E7%A8%8B/</link><pubDate>Wed, 23 Nov 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E5%AE%B9%E5%99%A8%E7%9A%84%E4%B8%80%E5%8F%B7%E8%BF%9B%E7%A8%8B/</guid><description>摘要 [[容器]]有自己的 Pid Namespace，从 1 开始计数。容器里 init 进程也叫 1 号进程，同时也是容器执行的程序本身。 换句话说，kill 1 号进程，容器也就被 kill 了
主要笔记 [[pause 容器]]的作用 深入理解容器的单进程模型和 k8s 中的 pause 容器 - kkbill - 博客园 作为每个 pod 中共享 Linux Namespace 的基础 [[在 Pod 中的容器之间共享进程命名空间||启用命名空间共享功能]]共享 PID namespace 之后，作为每个 pod 中 PID 为 1 的进程，负责回收僵尸进程。 from: 02 理解进程（1）：为什么我在容器中不能 kill 1 号进程？.</description></item><item><title>golang timer reset 问题</title><link>https://notes.abser.top/golang-timer-reset-%E9%97%AE%E9%A2%98/</link><pubDate>Fri, 11 Nov 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/golang-timer-reset-%E9%97%AE%E9%A2%98/</guid><description>摘要 定时器创建后是单独运行的，超时后会向通道写入数据，你从通道中把数据读走。当前一次的超时数据没有被读取，而设置了新的定时器，然后去通道读数据，结果读到的是上次超时的超时事件，看似成功，实则失败
所以使用 Reset 的时候，
1 2 3 4 if !t.Stop() { &amp;lt;-t.C } t.Reset(d) 然而这种方式会遇到问题 [[time: Timer.Reset is not possible to use correctly #14038]]，即如果计时器已经过期，且 channel 被取走数据，这个时候不要先调用 Stop()。
如果通过变量标明是否取出了数据，又会有竞态的问题，比如 goroutine 顺序完全依赖于调度器调度。 综上，没有 Reset() 完全理想的正确使用方式。
问题、提示 主要笔记 Refer： 论golang Timer Reset方法使用的正确姿势 | Tony Bai Golang官方有关Timer的issue list： runtime: special case timer channels #8898 time:timer stop ,how to use?</description></item><item><title>vim 替换所有行的内容</title><link>https://notes.abser.top/vim-%E6%9B%BF%E6%8D%A2%E6%89%80%E6%9C%89%E8%A1%8C%E7%9A%84%E5%86%85%E5%AE%B9/</link><pubDate>Thu, 10 Nov 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/vim-%E6%9B%BF%E6%8D%A2%E6%89%80%E6%9C%89%E8%A1%8C%E7%9A%84%E5%86%85%E5%AE%B9/</guid><description>摘要 替换所有行的内容： :%s/from/to/g</description></item><item><title>WARNING PV in VG vgXX is using an old PV header, modify the VG to update</title><link>https://notes.abser.top/WARNING-PV-in-VG-vgXX-is-using-an-old-PV-header-modify-the-VG-to-update/</link><pubDate>Sat, 05 Nov 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/WARNING-PV-in-VG-vgXX-is-using-an-old-PV-header-modify-the-VG-to-update/</guid><description>摘要 运行一下命令即可
1 vgck --updatemetadata vg_test 问题、提示 主要笔记 WARNING: PV /dev/sdX in VG vgXX is using an old PV header, modify the VG to update - Red Hat Customer Portal</description></item><item><title>特权容器</title><link>https://notes.abser.top/%E7%89%B9%E6%9D%83%E5%AE%B9%E5%99%A8/</link><pubDate>Thu, 03 Nov 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E7%89%B9%E6%9D%83%E5%AE%B9%E5%99%A8/</guid><description>摘要 问题、提示 容器中为什么无法运行 systemd 进程？ #query 如何在Docker里面使用systemctl - Ehds 主要笔记 docker 通过 --privileged=true 和 /usr/sbin/init 共同启动特权容器，可以不用后面的命令，区别是： 前者只是切换了 root 身份，但 Shell 环境仍然是普通用户的 Shell；而后者连用户和 Shell 环境一起切换成 root 身份了。 通常是为了使用 systemctl 而开启特权容器，原因是： That’s because “systemctl” talks to the systemd daemon by using the d-bus.</description></item><item><title>lvm</title><link>https://notes.abser.top/lvm/</link><pubDate>Wed, 02 Nov 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/lvm/</guid><description>摘要 问题、提示 主要笔记 LVM逻辑卷&amp;mdash;&amp;mdash;基础命令详解（三分钟入门） 左边这个更好 系统运维|Linux LVM简明教程 [[LVM 属性含义]]</description></item><item><title>LVM 提示信息问题</title><link>https://notes.abser.top/LVM-%E6%8F%90%E7%A4%BA%E4%BF%A1%E6%81%AF%E9%97%AE%E9%A2%98/</link><pubDate>Wed, 02 Nov 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/LVM-%E6%8F%90%E7%A4%BA%E4%BF%A1%E6%81%AF%E9%97%AE%E9%A2%98/</guid><description>摘要 export LVM_SUPPRESS_FD_WARNINGS=1 解决
主要笔记 每次执行 [[lvm]] 相关命令时都会弹出大量的报错信息，包含文件描述符泄露的信息：File descriptor 20 leaked on lvs invocation. Parent PID 1239361 https://unix.stackexchange.com/questions/4931/leaking-file-descriptors</description></item><item><title>etcd 的集成测试</title><link>https://notes.abser.top/etcd-%E7%9A%84%E9%9B%86%E6%88%90%E6%B5%8B%E8%AF%95/</link><pubDate>Fri, 28 Oct 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/etcd-%E7%9A%84%E9%9B%86%E6%88%90%E6%B5%8B%E8%AF%95/</guid><description>摘要 [[etcd]]
问题、提示 主要笔记 一个 todo 改进：etcd 的检查泄露的 [[goroutine]] 方法需要重构为 [[uber]] 的 go-leak 源码 项目结构：etcd 的集成测试也同样有一个 / tests / framework 目录下的 integration 文件夹。 每次测试初始化使用 NewCluster(t testutil.TB, cfg *ClusterConfig) *Cluster 启动一个 etcd 集群用于集成测试，集成测试的入口是 IntegrationTestRunner。 在 framework 中有区分 Test Runner：不同的 runner 代表测试场景的不同，有以下区别 UnitTestRunner：专门为单元测试准备的 runner，如果在这种测试入口中创建集群，则会失败（通过 *[[testing.</description></item><item><title>fuzzing 测试</title><link>https://notes.abser.top/fuzzing-%E6%B5%8B%E8%AF%95/</link><pubDate>Fri, 28 Oct 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/fuzzing-%E6%B5%8B%E8%AF%95/</guid><description>摘要 Fuzzing（模糊测试）是一种通过压力测试的形式来自动化软件测试过程的技术。关键思想是编写一个类似于单元测试或集成测试的 fuzzing 工具，它将使用一些任意的输入来执行被测试的应用程序。
问题、提示 主要笔记</description></item><item><title>Kubernetes 的集成测试</title><link>https://notes.abser.top/Kubernetes-%E7%9A%84%E9%9B%86%E6%88%90%E6%B5%8B%E8%AF%95/</link><pubDate>Fri, 28 Oct 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/Kubernetes-%E7%9A%84%E9%9B%86%E6%88%90%E6%B5%8B%E8%AF%95/</guid><description>摘要 问题、提示 Kubernetes 的[[集成测试]]怎么做的？ 如何让自己的应用在 Kubernetes 中进行集成测试？ #query [[Kind]] 可能就是答案。Refer Running KIND Inside A Kubernetes Cluster For Continuous Integration | D2iQ 主要笔记 模块依赖：最依赖的两个模块分别是 ETCD 和 APIServer ETCD：Kubernetes 集成测试需要安装 [[etcd]]（只要安装即可，不需要启动），测试的时候通过 [[Golang]] 调用 Command 执行二进制程序的方式启动。 来自源码 [[APIServer]] 是集成测试中必要且复杂的模块，[[StartTestServer]] 函数初始化了一些本地测试需要的配置，然后通过 / cmd / kube-apiserver / app / server.</description></item><item><title>OSS-Fuzz</title><link>https://notes.abser.top/OSS-Fuzz/</link><pubDate>Fri, 28 Oct 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/OSS-Fuzz/</guid><description>摘要 OSS-Fuzz 是谷歌为关键的开源项目提供的一项免费服务，用于持续运行它们的 fuzzing 并报告任何崩溃。
问题、提示 主要笔记</description></item><item><title>StartTestServer</title><link>https://notes.abser.top/StartTestServer/</link><pubDate>Fri, 28 Oct 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/StartTestServer/</guid><description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 // StartTestServer runs a kube-apiserver, optionally calling out to the setup.</description></item><item><title>testing.M</title><link>https://notes.abser.top/testing.M/</link><pubDate>Fri, 28 Oct 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/testing.M/</guid><description>摘要 Why use TestMain for testing in Go? - Medium
问题、提示 主要笔记</description></item><item><title>测试</title><link>https://notes.abser.top/%E6%B5%8B%E8%AF%95/</link><pubDate>Fri, 28 Oct 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E6%B5%8B%E8%AF%95/</guid><description>摘要 问题、提示 主要笔记 在写[[集成测试]]</description></item><item><title>集成测试</title><link>https://notes.abser.top/%E9%9B%86%E6%88%90%E6%B5%8B%E8%AF%95/</link><pubDate>Fri, 28 Oct 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E9%9B%86%E6%88%90%E6%B5%8B%E8%AF%95/</guid><description>摘要 集成测试的对象是软件中的不同模块，即==不同模块==之间的交互（数据通信）是该类型测试关注点。
问题、提示 主要笔记 [[Kubernetes 的集成测试]]</description></item><item><title>git如何查找已经被删除文件的历史修改记录？</title><link>https://notes.abser.top/git%E5%A6%82%E4%BD%95%E6%9F%A5%E6%89%BE%E5%B7%B2%E7%BB%8F%E8%A2%AB%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E7%9A%84%E5%8E%86%E5%8F%B2%E4%BF%AE%E6%94%B9%E8%AE%B0%E5%BD%95/</link><pubDate>Thu, 27 Oct 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/git%E5%A6%82%E4%BD%95%E6%9F%A5%E6%89%BE%E5%B7%B2%E7%BB%8F%E8%A2%AB%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E7%9A%84%E5%8E%86%E5%8F%B2%E4%BF%AE%E6%94%B9%E8%AE%B0%E5%BD%95/</guid><description>摘要 1 git log --all --full-history -- &amp;lt;path-to-file&amp;gt;</description></item><item><title>OLTP</title><link>https://notes.abser.top/OLTP/</link><pubDate>Thu, 27 Oct 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/OLTP/</guid><description>OLTP 的定义 OLTP 或联机事务处理是一种数据处理类型，包括执行多个并发的事务，例如网上银行、购物、订单输入或发送文本消息。这些事务传统上被称为经济或财务事务，会被记录并加以保护，帮助企业随时访问这些信息，以用于会计或报告目的。
问题、提示 主要笔记 [[OLTP 和 OLAP 的比较]]</description></item><item><title>OLTP 和 OLAP 的比较</title><link>https://notes.abser.top/OLTP-%E5%92%8C-OLAP-%E7%9A%84%E6%AF%94%E8%BE%83/</link><pubDate>Thu, 27 Oct 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/OLTP-%E5%92%8C-OLAP-%E7%9A%84%E6%AF%94%E8%BE%83/</guid><description>摘要 问题、提示 主要笔记 [[ACID]] 合规： OLTP 系统必须确保正确记录整个事务处理。事务处理通常涉及执行多个步骤或操作的程序执行。它可能在所有相关方确认事务、交付产品/服务，或对数据库中的特定表进行一定数量的更新时完成。仅当执行并记录了涉及的所有步骤时，事务处理才算是获得了正确的记录。如果任何一个步骤有任何错误，则必须中止整个事务处理，并且从系统中删除所有步骤。因此，OLTP 系统必须符合[[原子性]]、一致性、隔离性和持久性 (ACID) ，以确保系统中数据的准确性。 [[原子性]]：原子性控制确保事务处理中的所有步骤作为一个组成功完成。也就是说，如果事务处理之间的任何步骤失败，则所有其他步骤也必须失败或回滚。事务处理的成功完成称为提交。事务处理的失败称为中止。 一致性：事务处理保留数据库的内部一致性。如果您在最初一致的数据库中单独执行事务处理，则当事务处理完成执行时，数据库再次保持一致。 隔离性：事务处理的执行方式就像它单独运行一样，没有涉及其他事务处理。也就是说，运行一组事务处理的效果与一次运行一项事务处理的效果相同。这种行为称为可串行化，通常通过锁定表中的特定行来实现。 持久：事务处理的结果不会因失败而丢失。 并发性： OLTP 系统的用户群可以非常庞大，许多用户尝试同时访问相同的数据。系统必须确保尝试读取或写入系统的所有用户都可以同时执行此操作。并发控制确保两个用户同时访问数据库系统中的相同数据将无法更改该数据，或者一个用户必须等到另一个用户完成处理后才能更改数据。 扩展性： OLTP 系统必须能够即时扩展和缩小，以实时管理事务处理量并同时执行事务处理，而与尝试访问系统的用户数量无关。 可用性： OLTP 系统必须始终可用并随时准备接受事务处理。事务处理失败可能导致收入损失或产生法律影响。事务处理可以在全球任何地方随时执行，因此系统必须全天候可用。 高吞吐量并缩短响应时间： OLTP 系统需要纳秒甚至更短的响应时间，来提高企业用户的工作效率并满足客户不断增长的期望。 可靠性： OLTP 系统通常读取和操作高度选择性的少量数据。更重要的是，在任何指定时间点，数据库中的数据对于访问该数据的用户和应用程序来说都是可靠且值得信赖的。 安全性： 由于这些系统存储高度敏感的客户事务处理数据，因此数据安全性至关重要。任何违规行为对公司来说都需要付出非常昂贵的代价。 可恢复性： OLTP 系统必须在发生任何硬件或软件故障时具有恢复能力。 [[OLTP]] 系统 [[OLAP]] 系统 需要闪电般的快速回应时间 要求的响应时间比 [[OLTP]] 慢几个数量级 频繁修改少量数据，通常涉及读写平衡 完全不修改数据；工作负载通常是读取密集型的 使用[[索引]]数据来缩短响应时间 以[[列格式存储]]数据，以便轻松访问大量记录 需要频繁或并发的数据库[[备份]] 不需要太频繁的数据库备份 需要相对较少的存储空间 通常有大量存储空间，因为它们存储了大量历史数据 通常运行仅涉及一个或多个记录的简单查询 运行涉及大量记录的复杂查询 支持大量人员实时执行大量[[数据库事务]] 通常涉及查询数据库中的许多记录，甚至所有记录，以用于分析目的</description></item><item><title>公文写作</title><link>https://notes.abser.top/%E5%85%AC%E6%96%87%E5%86%99%E4%BD%9C/</link><pubDate>Wed, 26 Oct 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E5%85%AC%E6%96%87%E5%86%99%E4%BD%9C/</guid><description>摘要 问题、提示 主要笔记 [[公文写作助记词]]</description></item><item><title>公文写作助记词</title><link>https://notes.abser.top/%E5%85%AC%E6%96%87%E5%86%99%E4%BD%9C%E5%8A%A9%E8%AE%B0%E8%AF%8D/</link><pubDate>Wed, 26 Oct 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E5%85%AC%E6%96%87%E5%86%99%E4%BD%9C%E5%8A%A9%E8%AE%B0%E8%AF%8D/</guid><description> 统一描述：正确的、直接的、中肯的、雅致的、客观的、完整的、立体的、全面的、辩证的、形而上学的、雅俗共赏的、一针见血的、直击要害的 错误的、间接的、虚假的、庸俗的、主观的、残缺的、平面的、片面的、孤立的、辩证法的、雅俗之分的、离题万里的、不痛不痒的、违背祖宗的、不合常理的、乱七八糟的、七上八下的、龙飞凤舞的、不知所谓的、无语至极的、不可理喻的、无法接受的、一派胡言的、错上加错的、钉在耻辱柱上的错误行径。 针对性的、创造性的、发散性、 以全局性、战略性、前瞻性的眼光把握时代性、坚持实践性、特别要有针对性，面对战略性、长期性、可讲性 复杂性与艰巨性，调动积极性与创造性，有计划性、敏锐性的干好事情。在 规范化、程序化与制度化的重要程度，只有在有序化、科学化、知识化、法制化、集约化、正常化、有序化、智能化、优质化、常态化、科学化、集约化、年轻化、专业化的条件下，我们才能让结果变得正常化。 找准出发点、把握切入点、明确落脚点、找准落脚点、抓住切入点、把握着重点、找准切入点、把握着力点、抓好落脚点，注意着眼点、结合点、关键点、重视着重点、着力点、关键点，这些是做事情的支撑点。 始终要秉承着：责任感、紧迫感、危机感、认同感、荣誉感、成就感。 多层次、多方面、多途径、多渠道、多措施、多力量、多元素。 历史的必然、现实的选择、未来的方向。要：立足当前，着眼长远，自觉按规律办事。要：抓住机遇，应对挑战，勇敢顺潮流而为。要：突出重点，分步实施，找准切入点实施。要：全面推进，统筹兼顾，综合治理，融入其中，贯穿始终，切实抓好，扎实推进，加快发展，持续增收，积极稳妥，狠抓落实，从严控制， 严格执行，坚决制止，明确职责，高举旗帜，坚定不移，牢牢把握，积极争取，深入开展，注重强化，规范程序，改进作风，积极发展，努力建设，依法实行，良性互动，优势互补，率先发展，互惠互利，做深、做细、做实、全面分析，全面贯彻，持续推进，全面落实、全面实施，逐步扭转，基本形成，普遍增加，基本建立， 更加完备，逐步完善，明显提高，逐渐好转，逐步形成，不断加强，持续增效，巩固深化，大幅提高，显著改善，不断增强，日趋完善，比较圆满的完成任务！</description></item><item><title>容器容灾备份</title><link>https://notes.abser.top/%E5%AE%B9%E5%99%A8%E5%AE%B9%E7%81%BE%E5%A4%87%E4%BB%BD/</link><pubDate>Wed, 26 Oct 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E5%AE%B9%E5%99%A8%E5%AE%B9%E7%81%BE%E5%A4%87%E4%BB%BD/</guid><description>主要笔记 [[velero]] 是现行的 [[Kubernetes]] 集群[[异地灾备]]的主要选择，由 [[VMware]] 开发。 [[容器]]备份容灾的功能的工作原理是 用于存储[[容器镜像]]的数据（即[[PV]]）、[[Kubernetes]] 资源对象（即一系列 yaml 文件）的服务 服务可以是 [[Minio]] 提供[[对象存储服务]] 举例：[[本地磁盘]]由 [[carina]] 纳管提供的。 也可以不上传，直接调 [[SC]] 对 [[PV]] 进行 [[Snapshot]] 在管理上提供了更多的工作机制，从 [[velero]] 可以梳理这些 按需备份恢复 例如，您可能需要告诉数据库在拍摄快照之前将其内存缓冲区刷新到磁盘。来保证[[应用一致性]]，三个一致性中（[[不一致性]]，[[崩溃一致性]]和[[应用一致性]]） 在备份前对数据库进行 quiesce 操作，备份完 unquiesce。保证应用一致性，该点属于 自动定期执行 磁盘读写限速（避免影响业务） 增量备份 差异定制化选择 解释一下：不同集群毕竟还是有不一样的地方，比如 NodePort 类型的 Service，本身就有随机性，是否要在恢复的时候恢复到新集群呢？提供一个参数来选择 --preserve-nodeports [[Kubernetes 容灾解决方案]]梳理以下要点 备份粒度要到[[容器]] 可以备份数据（即 [[PV]]）和配置（即一系列资源的 yaml） 可以感知 [[Kubernetes]] 的[[命名空间]] 适合[[多云]]和[[混合云]]环境 保持[[应用一致性]] 换句话说也要有应用这个层面的抽象，这可能需要结合 [[Kubevela]] 和 [[OAM]] 这样的工具 [[RTO]] 和 [[RPO]] 需求对应不同方案 同步（例如：[[CDP]] ）与异步的方案影响 网络状态（数据中心的地理位置） 数据大小</description></item><item><title>崩溃一致性</title><link>https://notes.abser.top/%E5%B4%A9%E6%BA%83%E4%B8%80%E8%87%B4%E6%80%A7/</link><pubDate>Wed, 26 Oct 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E5%B4%A9%E6%BA%83%E4%B8%80%E8%87%B4%E6%80%A7/</guid><description>摘要 崩溃一致性备份会捕获[[备份]]时[[磁盘]]上已存在的数据，文件/磁盘数据在同一时间点，但不会备份内存数据并且[[静默应用系统]]，不保证应用系统备份一致性。尽管并未保证应用一致性，但通常情况下，操作系统重启后会进行 chkdsk 等磁盘检查过程来修复各种损坏错误，数据库会进行日志回滚操作保证一致性。
问题、提示 主要笔记</description></item><item><title>应用一致性</title><link>https://notes.abser.top/%E5%BA%94%E7%94%A8%E4%B8%80%E8%87%B4%E6%80%A7/</link><pubDate>Wed, 26 Oct 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E5%BA%94%E7%94%A8%E4%B8%80%E8%87%B4%E6%80%A7/</guid><description>摘要 文件/磁盘数据在同一时间点，并备份内存数据，保证应用系统一致性。
需要应用自身支持，比如数据库软件通常都支持。
问题、提示 主要笔记</description></item><item><title>Opensergo</title><link>https://notes.abser.top/Opensergo/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/Opensergo/</guid><description>摘要 问题、提示 主要笔记 这可能就是行业的细分标准之微服务治理层！[[行业的细分标准-基础设施层]]</description></item><item><title>OR-Tools</title><link>https://notes.abser.top/OR-Tools/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/OR-Tools/</guid><description>摘要 [[Google]] 贡献的， [[OR-Tools]]是用于组合优化的开源软件，该软件旨在从一系列可能的解决方案中找到解决问题的最佳解决方案。这里有一些问题解决的示例：
车辆路线：寻找限制的车辆舰队的最佳路线（例如，“这辆卡车不能容纳超过20,000磅”或“所有交货必须在两个小时的窗口中进行”）。 调度：找到一组复杂任务的最佳时间表，其中一些需要在其他机器或其他资源面前执行。 垃圾箱包装：将尽可能多的各种尺寸的物体包装成具有最大能力的固定数量的垃圾箱。 问题、提示 主要笔记 About OR-Tools | Google Developers</description></item><item><title>Paxos</title><link>https://notes.abser.top/Paxos/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/Paxos/</guid><description>摘要 问题、提示 主要笔记 [[paxos 抽象理解]] Is Raft more modular than MultiPaxos? | mahesh’s blog</description></item><item><title>paxos 抽象理解</title><link>https://notes.abser.top/paxos-%E6%8A%BD%E8%B1%A1%E7%90%86%E8%A7%A3/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/paxos-%E6%8A%BD%E8%B1%A1%E7%90%86%E8%A7%A3/</guid><description>摘要 [[两阶段锁]]+[[WOR]]
问题、提示 主要笔记 博客访问地址 [[Paxos]] 使用 [[Quorum 机制]] 实现了 [[WOR]] 这是因为 WOR 的单个 Server 实现，（数据存储在内存或者磁盘）没法持久化数据，必须跨服务器复制才能保证。然而我们对跨服务器的情况也要假设少数服务器会爆炸（比如爆炸导致该服务器数据不可恢复）所以需要 [[Quorum 机制]] 来进行一个多数写入的保证，为了容忍 F 台服务器爆炸，Paxos 需要 2F+1 台服务器。 使用[[两阶段锁]]定来实现并发控制 以上问题完成后，引入新的问题：多个客户端同时写入一个 [[Quorum 机制|Quorum]] 的时候，如果不互斥，则最终会在不同的少数服务器上获取到不同的值。（并发写入问题！哈。） 锁的主要问题在于 可能会遇到[[死锁]]，以[[严格的顺序]]获取锁以防止死锁会增加延迟。 [[分布式系统]]中的锁有一种新的故障模式：客户端在获取锁后可能会[[崩溃]]。 [[Paxos]] 通过一种锁窃取形式为这两个问题提供了解决方案。锁有版本或编号；编号较大的锁可以覆盖编号较小的锁。客户将选择一个唯一的锁号；然后尝试用它锁定一个仲裁。如果 acceptor 被解锁，或者被锁定为较小的数字，则获取锁成功；如果接受器被更高的锁号锁定，则失败（在这种情况下，锁定客户端可以使用更高的锁号重试）。锁不是建议性的；写入基于锁号，如果锁被盗，将在接受者处失败。 完成写入： 回想一下，我们假设少数服务器会爆炸。如果客户端锁定了大多数服务器；无法访问剩余的少数；并找到一个值已经写入该多数的单个接受器，它必须假设该值也写入不可访问的少数并确认回一些旧客户端。因此，前进的唯一途径是让新客户端采用该值作为自己的值并将其写入它可以访问的多数。如果存在多个这样的值，则客户端必须选择具有最高关联锁号的值。 Livelock： 如果两个客户端不断地互相窃取锁，显然上面的协议可以活锁。这个问题在理论上是不可能解决的：[[FLP 不可能性]] 结果（早于 Paxos 协议）表明，容错共识不能同时具有活跃性和安全性。Paxos 中的 Livelock 是 FLP 结果的实际示例。 不同的锁定/写入仲裁： 事实证明，您可以锁定一些多数仲裁并写入另一个多数仲裁；两个阶段的法定人数不必相同。（但是对未锁定的接受者的写入必须被解释为先锁定后写入，否则会出现 此错误）。Flexible Paxos 进一步指出，如果可以接受较低的持久性，则写入仲裁不一定必须是多数。 预锁定： 客户端可以在写入值时预先锁定仲裁以避免往返。为了提供对锁定的细粒度控制，我们可以显式地向 WOR 公开一个名为 lock() 的额外 API。如果客户端正在与多个 WOR 交互，而这些 WOR 恰好存在于同一组接受器上，我们可以预先锁定整批 WOR。事实证明，预锁定涵盖了 MultiPaxos 中的关键优化，我们将在后面讨论。</description></item><item><title>Quorum 机制</title><link>https://notes.abser.top/Quorum-%E6%9C%BA%E5%88%B6/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/Quorum-%E6%9C%BA%E5%88%B6/</guid><description>摘要 假设有 N 个副本，更新操作 w 在 W 个副本中更新成功之后，才认为此次更新操作w 成功。称成功提交的更新操作对应的数据为：“成功提交的数据”。对于读操作而言，至少需要读R个副本才能读到此次更新的数据。其中，W+R&amp;gt;N ，即 W 和 R 有重叠。 一般而言，W+R=N+1 比如 [[Raft]] 常见的三节点，W 和 R 都等于 2， W+R=4 &amp;gt; N=3
问题、提示 如何避免 [[Split Brain]] 问题 主要笔记 Quorum 机制是“[[抽屉原理]]”的一个应用。</description></item><item><title>Split Brain</title><link>https://notes.abser.top/Split-Brain/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/Split-Brain/</guid><description>摘要 Split Brain 是指在同一时刻有两个认为自己处于 Active 状态的 NameNode。
问题、提示 主要笔记</description></item><item><title>WOR</title><link>https://notes.abser.top/WOR/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/WOR/</guid><description>摘要 [[Paxos]] 是一种实现共识的协议。这意味着它实现了一个称为一次写入寄存器（[[WOR|Write-Once Register]]）（或 [[WOR]]）的逻辑对象。WOR 有一个简单的 API：您可以写入一次；你可以从中多次阅读。
1 2 3 4 5 6 7 8 class WOR{ public: //success means some write succeeded; //read after a write to see what was written. void write(std::string payload); //throw an exception if unwritten std::string read(); } 推导过程： [[paxos 抽象理解]]</description></item><item><title>两阶段锁</title><link>https://notes.abser.top/%E4%B8%A4%E9%98%B6%E6%AE%B5%E9%94%81/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E4%B8%A4%E9%98%B6%E6%AE%B5%E9%94%81/</guid><description>摘要 问题、提示 主要笔记</description></item><item><title>严格的顺序</title><link>https://notes.abser.top/%E4%B8%A5%E6%A0%BC%E7%9A%84%E9%A1%BA%E5%BA%8F/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E4%B8%A5%E6%A0%BC%E7%9A%84%E9%A1%BA%E5%BA%8F/</guid><description>摘要 问题、提示 主要笔记</description></item><item><title>分布式系统</title><link>https://notes.abser.top/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/</guid><description>摘要 问题、提示 主要笔记 分布式系统理论：[[CAP]] [[FLP 不可能性|FLP Impossibility]] [[BASE 理论]]</description></item><item><title>golang timer 解析</title><link>https://notes.abser.top/golang-timer-%E8%A7%A3%E6%9E%90/</link><pubDate>Fri, 21 Oct 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/golang-timer-%E8%A7%A3%E6%9E%90/</guid><description>网址： https://tonybai.com/2016/12/21/how-to-use-timer-reset-in-golang-correctly/
近期 gopheracademy blog发布了一篇 《 How Do They Do It: Timers in Go》，通过对timer源码的分析，讲述了timer的原理，大家可以看看。
go runtime 实际上仅仅是启动了一个单独的 [[goroutine]]，运行 timerproc函数，维护了一个”[[最小堆]]”，定期wake up后，读取堆顶的timer，执行timer对应的f函数，并移除该timer element。创建一个Timer实则就是在这个最小堆中添加一个element，Stop一个timer，则是从堆中删除对应的element。</description></item><item><title>wagyu</title><link>https://notes.abser.top/wagyu/</link><pubDate>Fri, 21 Oct 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/wagyu/</guid><description>#github
Intro::: A [[Rust]] library for generating cryptocurrency [[区块链钱包|wallet]] Link::: https://github.com/AleoHQ/wagyu [[Rust 学习]] [[区块链钱包]]</description></item><item><title>区块链钱包</title><link>https://notes.abser.top/%E5%8C%BA%E5%9D%97%E9%93%BE%E9%92%B1%E5%8C%85/</link><pubDate>Fri, 21 Oct 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E5%8C%BA%E5%9D%97%E9%93%BE%E9%92%B1%E5%8C%85/</guid><description>摘要 问题、提示 主要笔记</description></item><item><title>windows 开启自动执行脚本</title><link>https://notes.abser.top/windows-%E5%BC%80%E5%90%AF%E8%87%AA%E5%8A%A8%E6%89%A7%E8%A1%8C%E8%84%9A%E6%9C%AC/</link><pubDate>Thu, 20 Oct 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/windows-%E5%BC%80%E5%90%AF%E8%87%AA%E5%8A%A8%E6%89%A7%E8%A1%8C%E8%84%9A%E6%9C%AC/</guid><description>摘要 前者是针对某个账户的开机启动，账户名没改默认是Administrator，后者是针对所有账户的启动： 放在指定路径即可：
C:\Users\你的账户名\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp</description></item><item><title>windows 自动以管理员权限运行 bat 脚本</title><link>https://notes.abser.top/windows-%E8%87%AA%E5%8A%A8%E4%BB%A5%E7%AE%A1%E7%90%86%E5%91%98%E6%9D%83%E9%99%90%E8%BF%90%E8%A1%8C-bat-%E8%84%9A%E6%9C%AC/</link><pubDate>Thu, 20 Oct 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/windows-%E8%87%AA%E5%8A%A8%E4%BB%A5%E7%AE%A1%E7%90%86%E5%91%98%E6%9D%83%E9%99%90%E8%BF%90%E8%A1%8C-bat-%E8%84%9A%E6%9C%AC/</guid><description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 @echo off &amp;gt;nul 2&amp;gt;&amp;amp;1 &amp;#34;%SYSTEMROOT%\system32\cacls.exe&amp;#34; &amp;#34;%SYSTEMROOT%\system32\config\system&amp;#34; if &amp;#39;%errorlevel%&amp;#39; NEQ &amp;#39;0&amp;#39; ( goto UACPrompt ) else ( goto gotAdmin) :UACPrompt echo Set UAC = CreateObject^(&amp;#34;Shell.Application&amp;#34;^) &amp;gt; &amp;#34;%temp%\getadmin.</description></item><item><title>自动内外网路由 bat 脚本</title><link>https://notes.abser.top/%E8%87%AA%E5%8A%A8%E5%86%85%E5%A4%96%E7%BD%91%E8%B7%AF%E7%94%B1-bat-%E8%84%9A%E6%9C%AC/</link><pubDate>Thu, 20 Oct 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E8%87%AA%E5%8A%A8%E5%86%85%E5%A4%96%E7%BD%91%E8%B7%AF%E7%94%B1-bat-%E8%84%9A%E6%9C%AC/</guid><description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 @:loop @time /T @REM REM 是注释. &amp;#39;@&amp;#39;是关闭回显. @REM 1.1.1.1 是网关, 对应修改. @REM For Chengdu @set gateway=1.1.1.1 @REM For Shenzhen @REM @set gateway=1.</description></item><item><title>kubeadm 初始化流程</title><link>https://notes.abser.top/kubeadm-%E5%88%9D%E5%A7%8B%E5%8C%96%E6%B5%81%E7%A8%8B/</link><pubDate>Wed, 19 Oct 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/kubeadm-%E5%88%9D%E5%A7%8B%E5%8C%96%E6%B5%81%E7%A8%8B/</guid><description>摘要 问题、提示 主要笔记 代码位置： 在 Kubernetes 源码包里kubernetes/cmd/kubeadm/app，kubelet 这个 repo 只是用来做聚合 issues 用的。 sourcegraph 代码位置 kubeadm init 由一系列的 workflow 脚本组成， 截取如下： 1 2 3 4 initialize the workflow runner with the list of phases itRunner.AppendPhase(phases.NewPreflightPhase()) itRunner.</description></item><item><title>微服务二次开发框架</title><link>https://notes.abser.top/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/</link><pubDate>Wed, 19 Oct 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/</guid><description>摘要 核心是一套可定制的平台，以 [[Go]] Binary 程序和[[配置文件]]的方式安装基础设施。是二次开发平台，不是最终产品。 功能核心是 [[SQL]] 扩容，[[文档型数据库]]描述模型和 [[MInio]] 扩容。
问题、提示 主要笔记</description></item><item><title>配置文件</title><link>https://notes.abser.top/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</link><pubDate>Wed, 19 Oct 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</guid><description>摘要 问题、提示 主要笔记 [[云原生的十二因素]]-可配置化</description></item><item><title>DeepSpeed</title><link>https://notes.abser.top/DeepSpeed/</link><pubDate>Tue, 18 Oct 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/DeepSpeed/</guid><description>#github Intro::: DeepSpeed是Microsoft推出的深度学习库，用于训练Megatron-Turing NLG 530B和BLOOM等大型模型，在训练、推理和压缩三方面都有所创新。
Link::: https://github.com/microsoft/DeepSpeed
DeepSpeed具有如下优点：
可进行十亿乃至万亿级参数的稀疏/密集模型的训练/推理 可实现超高系统吞吐量，可高效扩展至数千个GPU 可在资源有限的GPU系统上进行训练/推理 可实现前所未有的低延时与高推理吞吐量 可用低成本实现压缩，从而大幅降低推理延迟并缩减模型大小</description></item><item><title>FairScale</title><link>https://notes.abser.top/FairScale/</link><pubDate>Tue, 18 Oct 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/FairScale/</guid><description>#github Intro::: FairScale是由Facebook Research开发的PyTorch扩展库，具备高性能，可用于大型训练。 Link::: https://github.com/facebookresearch/fairscale
FairScale的愿景如下： 易用性，开发简单易懂的FairScale API，使用户方便上手。 模块化，实现模块化，使用户可将多个FairScale API无缝加入其训练循环。 性能，实现 FairScale API的高可扩展性和高效率。 FairScale支持完全分片数据并行（FullyShardedDataParallel，FSDP），FSDP是扩展大型神经网络训练的推荐方法。</description></item><item><title>GoJS</title><link>https://notes.abser.top/GoJS/</link><pubDate>Tue, 18 Oct 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/GoJS/</guid><description>#github Link:::https://github.com/NorthwoodsSoftware/GoJS Intro:::JavaScript diagramming library for interactive flowcharts, org charts, design tools, planning tools, visual languages.</description></item><item><title>Megatron-LM</title><link>https://notes.abser.top/Megatron-LM/</link><pubDate>Tue, 18 Oct 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/Megatron-LM/</guid><description>Intro::: Megatron是NVIDIA应用深度学习研究团队研发的大规模Transformer语言模型训练框架，支持模型并行（张量并行、序列并行与流水并行）与多节点预训练（multi-node pre-training），目前已支持BERT、GPT和T5模型。 #github Link::: https://github.com/NVIDIA/Megatron-LM</description></item><item><title>OneFlow</title><link>https://notes.abser.top/OneFlow/</link><pubDate>Tue, 18 Oct 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/OneFlow/</guid><description>#github Intro:::
兼容PyTorch的API对模型进行编程 运用全局视角（Global View）API将模型扩展至n维并行执行或分布式执行 用静态图编译器（Static Graph Compiler）进行模型加速/部署 Link::: https://github.com/Oneflow-Inc/oneflow （论文： https://arxiv.org/abs/2110.15032 ）</description></item><item><title>2022-08-29</title><link>https://notes.abser.top/diary/2022-08-29/</link><pubDate>Wed, 12 Oct 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/diary/2022-08-29/</guid><description>[[未来人才的学习目标]]</description></item><item><title>AI 的基础设施</title><link>https://notes.abser.top/AI-%E7%9A%84%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD/</link><pubDate>Wed, 12 Oct 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/AI-%E7%9A%84%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD/</guid><description>AI Infra</description></item><item><title>CTO 确实同时需要扮演优秀的 engineer</title><link>https://notes.abser.top/CTO-%E7%A1%AE%E5%AE%9E%E5%90%8C%E6%97%B6%E9%9C%80%E8%A6%81%E6%89%AE%E6%BC%94%E4%BC%98%E7%A7%80%E7%9A%84-engineer/</link><pubDate>Wed, 12 Oct 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/CTO-%E7%A1%AE%E5%AE%9E%E5%90%8C%E6%97%B6%E9%9C%80%E8%A6%81%E6%89%AE%E6%BC%94%E4%BC%98%E7%A7%80%E7%9A%84-engineer/</guid><description>CTO 确实同时需要扮演优秀的 engineer 需要对该角色设置一些评判满足标准，保证 CTO 满足达到标准 https://blog.southparkcommons.com/your-cto-should-actually-be-technical/。该文章也在 HackerNews 上引起热议。</description></item><item><title>做总结和感想的时候需要具体的事例</title><link>https://notes.abser.top/%E5%81%9A%E6%80%BB%E7%BB%93%E5%92%8C%E6%84%9F%E6%83%B3%E7%9A%84%E6%97%B6%E5%80%99%E9%9C%80%E8%A6%81%E5%85%B7%E4%BD%93%E7%9A%84%E4%BA%8B%E4%BE%8B/</link><pubDate>Wed, 12 Oct 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E5%81%9A%E6%80%BB%E7%BB%93%E5%92%8C%E6%84%9F%E6%83%B3%E7%9A%84%E6%97%B6%E5%80%99%E9%9C%80%E8%A6%81%E5%85%B7%E4%BD%93%E7%9A%84%E4%BA%8B%E4%BE%8B/</guid><description>由前文想到，不同情况下人会有不同的感想，但是事例不会变，如果只记录当时的感悟和道理，并不能和后续的想法做对比。没有事例也没有说服力。</description></item><item><title>学习稀缺的技能</title><link>https://notes.abser.top/%E5%AD%A6%E4%B9%A0%E7%A8%80%E7%BC%BA%E7%9A%84%E6%8A%80%E8%83%BD/</link><pubDate>Wed, 12 Oct 2022 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E5%AD%A6%E4%B9%A0%E7%A8%80%E7%BC%BA%E7%9A%84%E6%8A%80%E8%83%BD/</guid><description>应用异常值算法的困难正是这样做的原因！更困难意味着更稀有。
为了帮助您开始应对这些挑战，以下是我一遍又一遍地回顾的四个经验法则。虽然只有四个，但它们的冲击力很大。它们是数百小时思考如何更好地找到稀有和有价值的技能的简化：
成为第一个学习有价值的技能的人。 跟踪新兴科学、技术、应用程序、工具、行业和领域。当它们呈指数增长时，花几个小时探索它们，看看是否值得投入更多时间。它可以帮助您尝试新事物，而不会将时间浪费在变成无用的事物上。 学习很难的有价值的技能。 愿意投资于禁忌、不是超级性感的、耗时、费力、看起来有风险或超级技术或学术的领域。 学习具有隐藏好处的宝贵技能。 人类有价值盲点。他们低估了具有抽象、长期回报的技能；微技能；其他学科的技能；和被遗忘的经典思想。 重新定义价值比共识更好。 在我们的职业生涯中，我们利用我们的技能为他人服务。可能是客户、老板、我们的粉丝、招聘人员或其他人。如果您能够比其他人更好地了解您所服务的人的未满足需求，您将能够更好地满足这些需求。 或者，简而言之，请记住：
成为第一 面对困难 寻找隐藏的好处 重新定义价值 以上是 Michael Simomons 的学习稀有技能的理论，其中总结的几点我们应该尝试的规则，在他的规则下，他指导有如下学习资源（随个人的情景可以有变种，这是当然的） ![[2022-09-29#^cff4f1]]
第一步，解释：我们现在从规则开始解释，从而找到我们自己情景下的学习 首先，所有的技能都很有价值，然后我们要去寻找稀缺性的技能。这个前提是我们先找到有价值的技能，通过一个指数增长的模型判断一个事物发展是否超出常规，这通常都代表这件事有价值。那我们以程序员的视角举例， Web3 正好是急需技能之一（因为需求而有价值），物联网，边缘方面的技能也并驾齐驱。 然后我们去寻找技能的稀缺性！（因为稀缺性决定价格）这也有一个模型来描述他，即被禁止的，未被大部分人发现的，可能枯燥的，耗时，费力的，或者看起来非常有风险的，以及非常学术的，非常技术专业的领域。（毕竟你不能指望一蹴而就的领域有多稀缺，信息差是很难一直保持的） 同时不要忽视长期的被动技能，复利主义，以及一些经典思想，他们由于长期存在于我们的身边，会被我们的价值评估器忽视。以抽象的，长期回报的技能为例：写笔记，坚持总结输出；微技能，一些工作上的小技巧，比如电脑使用领域上的一些工具快捷键；其他领域的技能！ 往往会产生巨大的化学反应，比如生物对计算机领域的影响，当然我还是建议学数学，比如金融割韭菜融入区块链；以及一些经典思想：分治和中间层的思想贯彻整个计算机科学，经常发现计算机的一些新领域应用了老的经典的思想从而大放异彩，比如深度学习啦！ 重新定义价值而非共识，这句类比对一个行业需求的深挖。技能可以为每一个使用者提供相同影响的结果，但精准的需求分析和挖掘，能让某项技能发掘出更多的价值，他提升了价值的同时也提升了稀缺性。 当然，以上规则其实主要是个人视角出发，如何发挥个人最大的影响力的思考，从团队等方向还能有更多，比如规模效应，然而我们希望将讨论范围限制在个人视角上以期提供一些切实的指导。
道理的扩散成本是非常低的，但是让一个人相信这个道理的成本是极高的。
第二步 分析学习资源的新变化 考虑稀缺性前 后 阅读最新的畅销书 学术论文 时刻检查社交媒体查看最具影响力的人的发言 领域之外的学科（加密学、经济学） 时刻保持关注行业最新的新闻（所有人都在关注） 获取一些专有数据的授权并研究 和领域内部人士建立深厚的关系（并且他们很少公开分享自己的观点 一些抽象的心理模型 可以看到其中明显的差距，同样的例子还有很多，就不一一列举了。笔者这里最想强调的还是稀缺代表远离共识，意味着你的选择几乎总是错的（即使你是个顶尖聪明的人），这是需要谦虚的态度，避免一次投入过多，需要有足够多的证据、验证。所以保持谦虚，离群才能尽量保证个人的稳定。</description></item><item><title>2021-07-19</title><link>https://notes.abser.top/diary/2021-07-19/</link><pubDate>Mon, 19 Jul 2021 00:00:00 +0000</pubDate><guid>https://notes.abser.top/diary/2021-07-19/</guid><description>就是这样</description></item><item><title>Configmap/Secret Manager</title><link>https://notes.abser.top/blogs/Configmap-Secret-Manager/</link><pubDate>Fri, 05 Aug 2016 20:20:56 -0400</pubDate><guid>https://notes.abser.top/blogs/Configmap-Secret-Manager/</guid><description>Configmap/Secret Manager
ReadLink configmap manager pkg/kubelet/secret/secret_manager.go Configmap Manager 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // Manager interface provides methods for Kubelet to manage ConfigMap. type Manager interface { // Get configmap by configmap namespace and name.</description></item><item><title>How Cloud Develop Kit from Google designed the docstore interface</title><link>https://notes.abser.top/blogs/How-Cloud-Develop-Kit-from-Google-designed-the-docstore-interface/</link><pubDate>Fri, 05 Aug 2016 20:20:56 -0400</pubDate><guid>https://notes.abser.top/blogs/How-Cloud-Develop-Kit-from-Google-designed-the-docstore-interface/</guid><description>How [[Cloud Develop Kit]] from Google designed the docstore interface
Refer Docstore · Go CDK urls.go - google/go-cloud - Sourcegraph driver.go - Go Design objectives: through the abstraction layer, we can mask differences, provide services in a standardized way, and configure business applications through description files.</description></item><item><title>Node Status Manager</title><link>https://notes.abser.top/blogs/Node-Status-Manager/</link><pubDate>Fri, 05 Aug 2016 20:20:56 -0400</pubDate><guid>https://notes.abser.top/blogs/Node-Status-Manager/</guid><description>Node Status Manager
ReadLink pkg/kubelet/nodestatus/setters.go / pkg / kubelet / kubelet_node_status.go
Directory Layout 1 2 3 pkg/kubelet/nodestatus |- setters.go |- setters_test.go
Setter 1 2 3 // Setter modifies the node in-place, and returns an error if the modification failed.</description></item><item><title>Open Source History of Dapr project</title><link>https://notes.abser.top/blogs/Open-Source-History-of-Dapr-project/</link><pubDate>Fri, 05 Aug 2016 20:20:56 -0400</pubDate><guid>https://notes.abser.top/blogs/Open-Source-History-of-Dapr-project/</guid><description>[[## Open Source]] History of [[Dapr]] project
At the beginning of this open-source column, I wrote this article to describe the birth and development of open-source projects, express my views on the open-source community and ecology, and share it with you.</description></item><item><title>React Hooks State Persistence</title><link>https://notes.abser.top/blogs/React-Hooks-State-Persistence/</link><pubDate>Fri, 05 Aug 2016 20:20:56 -0400</pubDate><guid>https://notes.abser.top/blogs/React-Hooks-State-Persistence/</guid><description>本文讲述如何分析设计 通过 [[React Hooks]] 进行 State 持久化管理
分析 正常前端，组件为类文件，自己维持状态，不易复用。
首先把组件中的 [[UI]] 和 状态分开，用 Action 连接，如下图。
![[blogs/Pasted image 20221011190847.png]]
Action 是[[算子]]
Function 则可成为以下函数
UI = f(S)
状态驱动组件重新渲染 UI
Scu =f(Sc, ∆)
组件会用到的 Scu 和 更改 Sc 的 ∆ 方法决定。</description></item><item><title>Role of microservice framework</title><link>https://notes.abser.top/blogs/Role-of-microservice-framework/</link><pubDate>Fri, 05 Aug 2016 20:20:56 -0400</pubDate><guid>https://notes.abser.top/blogs/Role-of-microservice-framework/</guid><description>Role of [[microservice framework]] HTTP Channel and [[GRPC]] Channel before we begin, let&amp;rsquo;s explore the differences between HTTP and RPC. The reason why gRPC is discussed here is that no one uses common RPC.
HTTP is a common communication method used for business coding, and its popularity is needless to say.</description></item><item><title>Technician and experiencer</title><link>https://notes.abser.top/blogs/Technician-and-experiencer/</link><pubDate>Fri, 05 Aug 2016 20:20:56 -0400</pubDate><guid>https://notes.abser.top/blogs/Technician-and-experiencer/</guid><description>Technician and experiencer We believe that the experience of the experience is linked to the actual things and actual behaviors, while the technology of the technician symbolizes more general knowledge.
First of all, in practical operation, it can be seen that skilled people are inferior to experienced people in all aspects, but they usually do better than inexperienced people.</description></item><item><title>TokenBucket</title><link>https://notes.abser.top/blogs/TokenBucket/</link><pubDate>Fri, 05 Aug 2016 20:20:56 -0400</pubDate><guid>https://notes.abser.top/blogs/TokenBucket/</guid><description>TokenBucket Overview ![image.png]( https://cdn.hashnode.com/res/hashnode/image/upload/v1657442131915/dUeLDBuYM.png align=&amp;ldquo;left&amp;rdquo;)
available per second Limit put tokens into the bucket, or, every time 1/Limit add a token to the second bucket maximum storage in buckets burst tokens. If the bucket is full, the new token will be discarded.</description></item><item><title/><link>https://notes.abser.top/chrome-%E7%9A%84-lighthouse-%E6%B5%8B%E8%AF%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/chrome-%E7%9A%84-lighthouse-%E6%B5%8B%E8%AF%95/</guid><description>google 官方介绍文档
一个 [[chrome]] 内置功能，评判网页性能打开速度等工作。评判很准所以传播广泛</description></item><item><title/><link>https://notes.abser.top/diary/2022-08-09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/diary/2022-08-09/</guid><description>观察到的好产品经理的共有特质是[[洞察(insight) ]]而在公司里有话语权的产品经理共有特质则是[[雄辩(eloquence)]]这两个特质许多时候是不兼容的，因为说的多了，看和听的时间就少了。 所以大公司产品到后来都做烂，除非顶层负责人还能保持产品初心。 来自 @天舟的分享</description></item><item><title/><link>https://notes.abser.top/diary/README/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/diary/README/</guid><description>这是无压力的记录，有些日志在里面，但是价值不大。 如果有价值，我会记着，或者作为独立文章输出观点。
因为遗忘也是重要的技能。</description></item><item><title/><link>https://notes.abser.top/events/README/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/events/README/</guid><description>记录我过去的 events。
1 myevent</description></item><item><title/><link>https://notes.abser.top/find-%E5%8A%A0-xargs-%E4%BD%BF%E7%94%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/find-%E5%8A%A0-xargs-%E4%BD%BF%E7%94%A8/</guid><description>find . -name &amp;quot;install.log&amp;quot; -print | xargs cat</description></item><item><title/><link>https://notes.abser.top/kubernetes-%E6%B3%A8%E9%87%8A-taints-%E8%84%9A%E6%9C%AC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/kubernetes-%E6%B3%A8%E9%87%8A-taints-%E8%84%9A%E6%9C%AC/</guid><description>单节点 [[Kubernetes]] 需要注释一下 [[NoSchedule]] 的污点（[[taints]]），让 [[Pod]] 可以调度到节点上。 查询方式：
1 kubectl get no -o yaml | grep taint -A 5 删除方式
1 kubectl taint nodes --all node-role.kubernetes.io/control-plane- 总所周知的标签、注解和污点</description></item><item><title/><link>https://notes.abser.top/LVM-%E5%B1%9E%E6%80%A7%E5%90%AB%E4%B9%89/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/LVM-%E5%B1%9E%E6%80%A7%E5%90%AB%E4%B9%89/</guid><description> http://blog.itpub.net/611609/viewspace-692589/
摘抄部分 lvs 命令显示字段
lv_attr Attr 逻辑卷状态。逻辑卷属性字节如下：
字节 1：卷类型：镜像（m）、不带初始同步的镜像（M ）、源
（o）、pvmove（p）、快照（s）、不可用快照（S）、虚拟(v）
字节 2：权限：可写入（w），只读（r）
字节 3：分配策略：持续（c）、正常（n）、任意（a）、继承
（i）。如果在修改分配时锁定了卷，就会显示成大写，比如在执行
pvmove 命令的时候。
字节 4：固定的副号码（m）
字节 5：激活（a）、暂停的（s）、不可用快照（I）、不可用暂停 快照（S）、不带表格的映射设备（d）、带未激活表格的映射设备（i）
字节 6：设备开放（o）</description></item><item><title/><link>https://notes.abser.top/LVM-%E5%BC%BA%E5%88%B6%E4%BF%AE%E6%94%B9%E5%85%83%E4%BF%A1%E6%81%AF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/LVM-%E5%BC%BA%E5%88%B6%E4%BF%AE%E6%94%B9%E5%85%83%E4%BF%A1%E6%81%AF/</guid><description>Refer： https://listman.redhat.com/archives/linux-lvm/2012-October/msg00030.html
1 2 3 4 5 vgcfgbackup -f vg.bak vgname edit vg.bak and remove all thinp related volumes vgcfgrestore -f vg.bak vgname 三步中，第二步要酌情删除目标项。</description></item><item><title/><link>https://notes.abser.top/nginx-%E9%80%9A%E7%94%A8%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/nginx-%E9%80%9A%E7%94%A8%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</guid><description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 server { listen 80; # gzip config gzip on; gzip_min_length 1k; gzip_comp_level 9; gzip_types text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml; gzip_vary on; gzip_disable &amp;#34;MSIE [1-6]\.</description></item><item><title/><link>https://notes.abser.top/NVMe/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/NVMe/</guid><description>Non-Volatile Memory Host Controller Interface Specification，非易失性[[存储]]主机控制器接口标准
为什么 NVMe 更快 #query [[PCIe]]：总线带来更大带宽和更低延迟 并行：传统的[[SATA]]设备只能支持一个队列，一次只能接收32条数据；而NVMe存储则支持最多64000个队列，每个队列有64000个条目。 [[SATA]] 协议理论最大传输速度 6.0Gbps</description></item><item><title/><link>https://notes.abser.top/SaaS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/SaaS/</guid><description>2018 年吧，我还记得当时讲解的现场，经过一系列的推演和被教学，当时决定 SaaS 作为未来 5 年的研究方向， 现在回首，确实通过 SaaS 进入了云计算的领域，做到了 [[IaaS]] 层去啦。也对基础设施有更深的领悟。对于 IT 和互联网企业和物联网企业，一个扎实的基础设施，灵活扩展的[[规范标准]]，行业的深耕领域知识的结合，这些基础设施的构建将会是未来一个阶段的主旋律。当[[行业的细分标准-基础设施层|行业细分标准]]制定完成后，类似 FireStore 的 SaaS 将会较容易的做出来了。说不定这时候，反而阴差阳错的实现了当初的目标。</description></item><item><title/><link>https://notes.abser.top/slipbox/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/slipbox/</guid><description>原来就是卢曼笔记啊</description></item><item><title/><link>https://notes.abser.top/Sophisticated-zh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/Sophisticated-zh/</guid><description>Sophisticated 发音 səˈfɪstɪkeɪtɪd səˈfɪstɪˌketɪd 词义 能被表示程度的副词或介词词组修饰的形容词 (机器、装置等)高级的，精密的;(方法)复杂的
蜜蜂之间所用的交流方式是昆虫中最为复杂的方式之一。
能被表示程度的副词或介词词组修饰的形容词 善于社交的;高雅时髦的;见过世面的
克劳德是一个很有魅力、见多识广的伙伴。
能被表示程度的副词或介词词组修饰的形容词 精明老练的;老于世故的
这些人是观察外交政策领域动向的行家里手。</description></item><item><title/><link>https://notes.abser.top/terraform-minio/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/terraform-minio/</guid><description>结合 devcloud 和之前的 minio 中间件思考一下问题：如何集成使用？
首先描述 Minio Provier， [[MInio]] 是需要自己部署的，[[Terraform]] minio 这个 [[terraform provider|provicer]]只是提供了配置选项。不过我们使用基础设施其实也就是配置了。没有启动功能用什么启动呢？
自己本地启动 通过 terraform 的其他云 provider 在云上申请一个这样的资源，比如 AWS Terraform Provider 当然，由于 [[terraform]] 的 [[terraform provider]] 编写比较简单，其实也可以自己编辑一个以 [[docker]] 作为 [[infrastructure]] 的包含 minio 启动流程的 provider 啦。比如组合 docker provider 声明一个 minio 镜像的 [[container]] 就好啦。</description></item><item><title/><link>https://notes.abser.top/Terraform-%E9%85%8D%E7%BD%AE%E6%9C%AC%E5%9C%B0%E7%A6%BB%E7%BA%BF%E6%BA%90/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/Terraform-%E9%85%8D%E7%BD%AE%E6%9C%AC%E5%9C%B0%E7%A6%BB%E7%BA%BF%E6%BA%90/</guid><description>1. 创建配置文件 .terraformrc是 [[Terraform]] CLI的配置文件
1 2 3 4 5 6 7 8 plugin_cache_dir = &amp;#34;/root/.terraform.d/terraform-plugin-cache&amp;#34; disable_checkpoint = true provider_installation { filesystem_mirror { path = &amp;#34;/root/.terraform.d/terraform-plugin-cache&amp;#34; include = [&amp;#34;registry.terraform.io/*/*&amp;#34;] } } plugin_cache_dir 是插件的缓存目录（此目录需要提前创建不然init报错） disable_checkpoint 禁用 需要连接HashiCorp 提供的网络服务的升级和安全公告检查 2.</description></item><item><title/><link>https://notes.abser.top/timeline-%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/timeline-%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/</guid><description>添加事件实例 {{title}}
注意 tags 需要同时满足要求并且有 timeline 标识的 markdown 文件才会被搜索上述 span 并生成 timeline。
展示示例 1 2 ```timeline myevent 垂直可以这样设置 1 2 3 4 5 6 ```timeline-vis tags=2 startDate=2020 endDate=2023 fivHeight=8 minDate=10 静态页面 生成静态 html 页面这样设置，然后使用 Timelines: Render Timeline 命令生成。</description></item><item><title/><link>https://notes.abser.top/%E4%BA%91%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E4%BA%91%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</guid><description>Notes 和 [[分布式]] 有关</description></item><item><title/><link>https://notes.abser.top/%E5%85%AC%E6%9C%89%E4%BA%91%E5%92%8C%E7%A7%81%E6%9C%89%E4%BA%91%E5%8D%A0%E6%AF%94/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E5%85%AC%E6%9C%89%E4%BA%91%E5%92%8C%E7%A7%81%E6%9C%89%E4%BA%91%E5%8D%A0%E6%AF%94/</guid><description>[[AWS]] CEO Andy Jessy在AWS 2019 re:Invent大会上分享了如下消息：[[公有云]]的总支出只占到总IT支出的3% 。IT支出中，[[私有云]]仍占绝大多数</description></item><item><title/><link>https://notes.abser.top/%E5%88%A9%E5%9F%BA%E5%B8%82%E5%9C%BA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E5%88%A9%E5%9F%BA%E5%B8%82%E5%9C%BA/</guid><description>利基市场（英语：niche market）也称利益市场、小众市场，是指由已有 市场占有率绝对优势的 企业所忽略之某些细分 市场，并且在此市场尚未完善供应服务。一般由较小的产品市场并具有持续发展的潜力中，一些需要但尚未被满足的族群消费者所组成。为了满足特定的市场需求，价格区间与产品质量，针对细分后的产品进入这个小型市场且有盈利的基础。企业根据自身所特有的资源优势，经由专业化的经营将品牌意识灌输到该特定消费者族群中，逐渐形成该族群的领导品牌，来占领这些市场，从而最大限度的获取收益所采取之竞争战略。</description></item><item><title/><link>https://notes.abser.top/%E5%89%8D%E6%B2%BF%E7%9F%A5%E8%AF%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E5%89%8D%E6%B2%BF%E7%9F%A5%E8%AF%86/</guid><description> 梳理一下我学习的过去的前沿知识和未来要学习的范畴 [[SaaS]]、[[IaaS]] [[GitOps]]：真没用 [[AIops]]：算法真是锦上添花的东西 [[DevSecOps]]：融入安全理念，希望结合出新东西吧 [[Workflow as Code|Temporal]] [[PriceOps]]</description></item><item><title/><link>https://notes.abser.top/%E5%9C%A8-Pod-%E4%B8%AD%E7%9A%84%E5%AE%B9%E5%99%A8%E4%B9%8B%E9%97%B4%E5%85%B1%E4%BA%AB%E8%BF%9B%E7%A8%8B%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E5%9C%A8-Pod-%E4%B8%AD%E7%9A%84%E5%AE%B9%E5%99%A8%E4%B9%8B%E9%97%B4%E5%85%B1%E4%BA%AB%E8%BF%9B%E7%A8%8B%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/</guid><description> 在 Pod 中的容器之间共享进程命名空间 | Kubernetes
1 ps ax 输出类似于：
1 2 3 4 5 6 PID USER TIME COMMAND 1 root 0:00 /pause 8 root 0:00 nginx: master process nginx -g daemon off; 15 root 0:00 sh 22 101 0:00 nginx: worker process 23 root 0:00 ps ax</description></item><item><title/><link>https://notes.abser.top/%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/</guid><description>存储管理关注的不是高性能，而是高扩展，管理面的能力以存储为例，其实就是贯彻整个存储生命周期，通过管理的手段提高存储价值。
因此，数据的生产、[[备份]]、[[故障隔离]]、[[容灾]]、恢复、[[持续数据保护]]、安全能力接入、数据 AI 接入这些属于管理面的能力。</description></item><item><title/><link>https://notes.abser.top/%E5%AD%98%E5%82%A8%E9%A2%86%E5%9F%9F%E7%9A%84%E6%99%BA%E8%83%BD%E5%8C%96/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E5%AD%98%E5%82%A8%E9%A2%86%E5%9F%9F%E7%9A%84%E6%99%BA%E8%83%BD%E5%8C%96/</guid><description>![[Pasted image 20221013145353.png]]</description></item><item><title/><link>https://notes.abser.top/%E6%9C%AA%E6%9D%A5%E4%BA%BA%E6%89%8D%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%9B%AE%E6%A0%87/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E6%9C%AA%E6%9D%A5%E4%BA%BA%E6%89%8D%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%9B%AE%E6%A0%87/</guid><description>Summary 做 ==AI 的基础设施==的学习
Questions/Cues 2022-10-12 [[学习稀缺的技能]]对[[程序员]]来说是哪些？ #query Notes 做 [[AI 的基础设施]]，再逐渐过渡到数据，后续还有数据交易这些。我的观点是不做ai，毕竟优势不在这。
最优选择还是和金融相关、数据交易相关，但是这些目前都还是起步，风险大，慢慢看就行。
主要是对于这个行业的理解，必须随着持续做下去，才能看到清晰的方向。这样有机会的话，可以带着技术换个更牛的企业，比如银行。
做复合型人才，主要还是要做，做的过程中体会，不要着急，我觉得都没必要在三年内锁死自己发展方向。
存储、网络如果发展的好，本地计算机意义都不大，问题是在什么时候才能达到预期，那么[[云操作系统]]，又应该是什么形态，这些作为主攻方向都是不错的。 ^eda002
反正我觉得与其在性能上下功夫，不如在管理上，硬件成本又不是大问题，对不对。
即使在云端考虑，也是[[管理高于性能]]的，做管控，不做技术细节的提升，本身优势就很大，单项技术深入研究难度极高，但是管理控制是综合技术应用，空间也大。</description></item><item><title/><link>https://notes.abser.top/%E7%A7%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E7%A7%8B/</guid><description>秋桜　aki sakura</description></item><item><title/><link>https://notes.abser.top/%E7%AE%A1%E7%90%86%E9%AB%98%E4%BA%8E%E6%80%A7%E8%83%BD/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E7%AE%A1%E7%90%86%E9%AB%98%E4%BA%8E%E6%80%A7%E8%83%BD/</guid><description>摘要 问题、提示 主要笔记 [[分布式]] 和 [[云操作系统]] 带来的变化</description></item><item><title/><link>https://notes.abser.top/%E8%81%8C%E4%B8%9A%E6%9C%AC%E7%A7%91/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E8%81%8C%E4%B8%9A%E6%9C%AC%E7%A7%91/</guid><description>高等职业本科，是全日制本科 学历教育的一种，学位为 学士学位。 高职本科与 普通本科共同构成我国高等教育体系的全日制 本科层次。
肩负着培养面向生产、建设、服务和管理第一线需要的高素质的应用技术型和职业技能型高等专业人才的使命。
其中最重要的是高素质和高技能，注意他们工作的领域，生产建设，服务管理。如果没有高素质，社会很难安定，如果没有高技能，就很容易被科技淘汰。随着时代发展，低级的生产，建设，会降低占比，这代表提高职高人素质势在必行，国家的相关文案也是如此：为了适应 国家经济转型和新的 经济增长方式转变对各类高级技能人才的需求，构建 现代职业教育的“立交桥”，促进现代职业教育的发展。</description></item><item><title/><link>https://notes.abser.top/%E8%A1%8C%E4%B8%9A%E7%9A%84%E7%BB%86%E5%88%86%E6%A0%87%E5%87%86-%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%B1%82/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E8%A1%8C%E4%B8%9A%E7%9A%84%E7%BB%86%E5%88%86%E6%A0%87%E5%87%86-%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%B1%82/</guid><description/></item><item><title/><link>https://notes.abser.top/%E9%97%AA%E5%AD%98%E5%8C%96/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E9%97%AA%E5%AD%98%E5%8C%96/</guid><description>根据IDC 在2019年12月31日的报道：“2019前三个季度，中国企业级全闪存存储阵列市场同比增长超过60%。IDC预测， 2019年全闪存存储市场仍将达到近50%的增长”。
据报道，[[闪存颗粒]]价格逐年下降（按照30%～40%的降幅）
闪存化的过程中，必然催生[[全闪存阵列]]的发展，其中的相关技术[[NVMe Over Fabric]]（简称NVMe-oF）借助[[RDMA]]等超低延时的传输协议，可远程访问[[SSD]]，解决了下一代数据中心在横向扩展 (Scale-out) 时所遭遇的性能、功能、容量三者之间难以取舍的权衡问题</description></item><item><title>2022-09-27</title><link>https://notes.abser.top/diary/2022-09-27/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/diary/2022-09-27/</guid><description>[[不要片面的根据一部分想法下决定]] [[做总结和感想的时候需要具体的事例]]
[[CTO 确实同时需要扮演优秀的 engineer]]</description></item><item><title>2022-09-28</title><link>https://notes.abser.top/diary/2022-09-28/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/diary/2022-09-28/</guid><description> #todo * * #journal 17:50 离群的特异学习会远离共识，共识通常是正确的，因此稀有的技能选择存在巨大的风险，为了降低风险，我们必须保持谦虚。 18:10 看到一篇很好的关于选择学习什么技能的文章： https://medium.com/accelerated-intelligence/while-most-people-fight-to-learn-in-demand-skills-smart-people-are-secretly-learning-rare-skills-f9b26856c9d6 学习笔记：[[学习稀缺的技能]]</description></item><item><title>2022-09-29</title><link>https://notes.abser.top/diary/2022-09-29/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/diary/2022-09-29/</guid><description> #todo * *
#journal
15:34 添加测试
20:23 memory 真好用，可以用来吐槽，就是没有发送快捷键
20:25 最近需要思考学点什么东西。把昨天的博客看完吧
20:30 学术文章
我领域之外的学科，其他人甚至都不知道
许可专有数据
与可能不会公开分享某些见解的领域内部人士建立深厚的关系
心智模型（难以评估的抽象值） 这些才是应该在我们的日常学习中去学习的东西，总结的面很到位。因为稀缺性，才有放大的价格。 ^cff4f1</description></item><item><title>2022-09-30</title><link>https://notes.abser.top/diary/2022-09-30/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/diary/2022-09-30/</guid><description> #todo golang devcloud 使用 minio 学习稀有技能的进一步研究，找一个目标 [[学习稀缺的技能]] #journal ^e61eca</description></item><item><title>2022-10-08</title><link>https://notes.abser.top/diary/2022-10-08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/diary/2022-10-08/</guid><description>[[buildkit]] 高策写过 buildkit 的使用体验，在他的 [[envd]] 的工作中 ^42517f 新 [[Dockerfile]] 语法特性：buildkit 可以通过 docker buildx build 解析新的语法特性。from [[2022-10-08#^42517f]] 多次 build 之间的缓存 RUN --mount=type=cache,target=/root/.cache/pip pip install ... 多体系架构的支持 docker buildx build --platform linux/amd64,linux/arm64 . 多行脚本 [[Dockerfile 多行脚本]] 只增加一个构建层 [[rocksdb]] 是单节点 KV 数据库, 设计基于 [[LSMs]] .</description></item><item><title>2022-10-09</title><link>https://notes.abser.top/diary/2022-10-09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/diary/2022-10-09/</guid><description>尝试使用软件进行思路的梳理，现在是个人时间看板的梳理。[[MnicTime]] 这个软件是可以记录所有的软件的时间的。手机 iPhone 也可以记录软件使用时间。 不能像上面流水线记录，不然跟不上思路。总结然后记录：
目的：需要找到哪些是可以优化的时间习惯。 通过目前对自我的观察：
各种群聊的聊天，然后发消息，消耗了部分时间 消磨时间的操作，这部分时间应该属于可以优化的。 最后是因为好奇心去看文章的时间 三类大时间中，首先优化聊天时间，去掉大部分要进入查看的群聊即可，感觉很简单嘛。
[[使用 quartz 托管 obsidian 到网络上]]
[[清理 GIt 中的历史文件]]</description></item><item><title>2022-10-10</title><link>https://notes.abser.top/diary/2022-10-10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/diary/2022-10-10/</guid><description>[[Pricing as Code]] 是[[Tier]]这个产品使用的理念。</description></item><item><title>2022-10-12</title><link>https://notes.abser.top/diary/2022-10-12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/diary/2022-10-12/</guid><description>今天研究了一下 [[etcd 的性能瓶颈]]。[[etcd]] 的 event 事件太多，影响 etcd 性能，有很多大公司有过分离存储 event 的实践。 通过参数--etcd-servers-overrides stringSlice可以将event存储到单独的集群。
Etcd is used for two distinct cluster purposes - cluster state and event processing. These have different i/o characteristics. It is important to scalability testing efforts that the iops provided by the servers to etcd be consistent and protected.</description></item><item><title>anaconda 安装</title><link>https://notes.abser.top/anaconda-%E5%AE%89%E8%A3%85/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/anaconda-%E5%AE%89%E8%A3%85/</guid><description>下载地址： https://www.anaconda.com/products/distribution
以 linux 为例，下载的是一个 .sh 的文件，通过 bash 运行他即可
bash Anaconda3-2020.11-Linux-x86_64.sh
会运行一段交互式脚本，确认安装配置。
内网环境配置 conda config --add channels [https://mirrors.aliyun.com/pypi/simple/](https://mirrors.aliyun.com/pypi/simple/)
查看添加的镜像：
conda config --get channels
推荐使用搜到的 .condarc直接复制粘贴
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 channels: - defaults show_channel_urls: true channel_alias: http://xxx.</description></item><item><title>ConfigMap</title><link>https://notes.abser.top/ConfigMap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/ConfigMap/</guid><description>Kubernetes 中的一个对象。可以理解为一个 yaml 文件专门用作 APP 的配置文件，提供了相应的
挂载 监控更新 等功能。 限制：只有 1m 大小</description></item><item><title>CUDA Windows 环境搭建</title><link>https://notes.abser.top/CUDA-Windows-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/CUDA-Windows-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid><description>引用[[anaconda 安装]]
Windows 环境搭建 CUDA https://developer.nvidia.com/cuda-downloads
下载了 windows 下的 CUDA 11.7 的 local 版本，2.5g，下载安装即可
安装完之后重启，可以运行nvidia-smi.exe查看一下自己的显卡。
Conda （python 环境） 下载 miniconda
https://docs.conda.io/en/latest/miniconda.html 安装
通过 code $PROFILE 启动 vscode 添加该环境到 powershell 自动启动脚本中
1 2 # 启动 miniconda 环境 D:\miniconda\shell\condabin\conda-hook.ps1 ;conda activate &amp;#39;D:\miniconda&amp;#39; Pytorch &amp;amp; Jupyter 因为有梯子，速度挺快，就不用镜像源了</description></item><item><title>Dockerfile 多行脚本</title><link>https://notes.abser.top/Dockerfile-%E5%A4%9A%E8%A1%8C%E8%84%9A%E6%9C%AC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/Dockerfile-%E5%A4%9A%E8%A1%8C%E8%84%9A%E6%9C%AC/</guid><description>1 2 3 4 5 6 7 8 # syntax = docker/dockerfile:1.4 FROM debian -RUN apt-get &amp;amp;&amp;amp; \ - apt-get install -y vim +RUN &amp;lt;&amp;lt;eot bash + apt-get update + apt-get install -y vim eot</description></item><item><title>etcd</title><link>https://notes.abser.top/etcd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/etcd/</guid><description>[[分布式]][[键值数据库]]</description></item><item><title>etcd 的性能瓶颈</title><link>https://notes.abser.top/etcd-%E7%9A%84%E6%80%A7%E8%83%BD%E7%93%B6%E9%A2%88/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/etcd-%E7%9A%84%E6%80%A7%E8%83%BD%E7%93%B6%E9%A2%88/</guid><description>[[etcd]] 通常和 [[API Server]] 一起作为整个 [[Kubernetes 的性能瓶颈]]
Refer Link 蚂蚁集团万级规模 K8s 集群 etcd 高可用建设之路 · SOFAStack 以下摘抄的经验数据
当 K8s 集群规模扩大时，etcd 承载着 KV 数据剧增、event 消息暴增以及消息写放大的三种压力。 为了证明所言非虚，特引用部分数据为佐证：
1. etcd KV 数据量级在 100 万以上；
2. etcd event 数据量在 10 万以上；
3. etcd 读流量压力峰值在 30 万 pqm 以上，其中读 event 在 10k qpm 以上；
4.</description></item><item><title>Focus and Different</title><link>https://notes.abser.top/Focus-and-Different/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/Focus-and-Different/</guid><description>摘要 最近总结的 #原则 和 #观念 ： 意义这种东西是通过聚集一个层面产生的。
问题、提示 为什么会觉得[[生活没有意义？]] #query 其实更应该聚焦自己的当下生活，就会发现任何以前评估没有太大影响的事件，都对自己至关重要。 主要笔记</description></item><item><title>Go</title><link>https://notes.abser.top/Go/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/Go/</guid><description>[[Golang]] 的简写，一门计算机语言，[[我]]比较擅长。</description></item><item><title>hugo-extended</title><link>https://notes.abser.top/hugo-extended/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/hugo-extended/</guid><description>hugo 安装网址： https://gohugo.io/getting-started/installing/
windows 我直接使用了安装
1 scoop install hugo-extended</description></item><item><title>hugo-obsidian</title><link>https://notes.abser.top/hugo-obsidian/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/hugo-obsidian/</guid><description>使用 [[Golang]] install 功能安装
1 2 # Install and link `hugo-obsidian` locally go install github.com/jackyzha0/hugo-obsidian@latest</description></item><item><title>IaaS</title><link>https://notes.abser.top/IaaS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/IaaS/</guid><description>摘要 针对笔记问的问题 主要笔记</description></item><item><title>kube-vip 的专门的感谢 issue</title><link>https://notes.abser.top/kube-vip-%E7%9A%84%E4%B8%93%E9%97%A8%E7%9A%84%E6%84%9F%E8%B0%A2-issue/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/kube-vip-%E7%9A%84%E4%B8%93%E9%97%A8%E7%9A%84%E6%84%9F%E8%B0%A2-issue/</guid><description>#开源趣闻 https://github.com/kube-vip/kube-vip/issues/239
Not an issue, just a thank you #239   Closed
opened this issue 4 comments Comments
kylos101 on 11 Jul 2021 This is amazing, I just got it setup, and cannot believe it was that easy to get working!</description></item><item><title>Kubernetes 的性能瓶颈</title><link>https://notes.abser.top/Kubernetes-%E7%9A%84%E6%80%A7%E8%83%BD%E7%93%B6%E9%A2%88/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/Kubernetes-%E7%9A%84%E6%80%A7%E8%83%BD%E7%93%B6%E9%A2%88/</guid><description>[[Kubernetes]] 有很多[[性能调优]]的参数。
2022年10月12日：前年看到的限制是 5000 pod，印象里这个值没有太大提升。
单 Node Pod 承载数：一般在 100 以下，也有强力[[Kubernetes 集群的降本增效]]到 140 的</description></item><item><title>Kubernetes 集群的降本增效</title><link>https://notes.abser.top/Kubernetes-%E9%9B%86%E7%BE%A4%E7%9A%84%E9%99%8D%E6%9C%AC%E5%A2%9E%E6%95%88/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/Kubernetes-%E9%9B%86%E7%BE%A4%E7%9A%84%E9%99%8D%E6%9C%AC%E5%A2%9E%E6%95%88/</guid><description>通过 [[HPA]] 和 [[ClusterAutoscaler]] [[降本增效]]吧
[[离线混部]]也是业界主要探索的，有不少[[开源项目]]</description></item><item><title>LSMs</title><link>https://notes.abser.top/LSMs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/LSMs/</guid><description>基于日志结构的合并树</description></item><item><title>LVM 重启需要重新初始化否则丢失 vg 设备的问题</title><link>https://notes.abser.top/LVM-%E9%87%8D%E5%90%AF%E9%9C%80%E8%A6%81%E9%87%8D%E6%96%B0%E5%88%9D%E5%A7%8B%E5%8C%96%E5%90%A6%E5%88%99%E4%B8%A2%E5%A4%B1-vg-%E8%AE%BE%E5%A4%87%E7%9A%84%E9%97%AE%E9%A2%98/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/LVM-%E9%87%8D%E5%90%AF%E9%9C%80%E8%A6%81%E9%87%8D%E6%96%B0%E5%88%9D%E5%A7%8B%E5%8C%96%E5%90%A6%E5%88%99%E4%B8%A2%E5%A4%B1-vg-%E8%AE%BE%E5%A4%87%E7%9A%84%E9%97%AE%E9%A2%98/</guid><description>https://www.aboutyun.com/thread-16065-1-1.html
设置 开机挂载 ，ok了
cat /etc/rc.d/rc.local |grep cinder-volumes || echo &amp;rsquo;losetup -f /var/lib/cinder/cinder-volumes &amp;amp;&amp;amp; vgchange -a y cinder-volumes &amp;rsquo; &amp;raquo; /etc/rc.d/rc.local</description></item><item><title>maigret</title><link>https://notes.abser.top/maigret/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/maigret/</guid><description>https://github.com/soxoj/maigret</description></item><item><title>namespace</title><link>https://notes.abser.top/namespace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/namespace/</guid><description>Kubernetes 中的命名空间概念，可参考 [[Linux Namespace]]</description></item><item><title>PriceOps</title><link>https://notes.abser.top/PriceOps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/PriceOps/</guid><description>什么是 PriceOps ? 解释网址： https://priceops.org/
做一下笔记：
PriceOps 部分定义
PriceOps 是一种实现迭代和灵活性的方法。它描述了一组通过有效管理固有复杂性来促进定价模型探索的实现属性。将此视为一组架构蓝图和最佳实践，可以帮助您持续开发和完善您的定价基础架构。
PriceOps_不是_关于任何特定产品应如何定价或如何确定此类价格的规定性指南。相反，它是如何实施定价模型以最大限度地提高灵活性和稳定性的指南。
我理解如下：
将定价模型通过代码描述出来，现在是 json，因为有 code 极强的表达能力，所以可能可以从中看出定价对于产品的影响有哪些。从而做出调整。
列出了支撑模型的五个支柱（英文：[[pillar]])
定价模型的定义：例如版本化代表不会影响之前的用户 用户的时间表：这样一个定价计划就可以规定在哪些时间里面可以使用哪些功能，并能有多少使用量 计量系统：用于收集所有用户使用信息，一个数据中心中存储，来帮助定价模型的更新 权限检查：这样应用程序代码只需要提供功能，不需要知道功能在哪些计划中。 PriceOps 工具：为以上行为提供操作的工具 我很喜欢这种 [[逐步描述一个新模型的方式]]，它还能持续迭代一个东西定义，如果一开始就下结论，这个模型就老死了。</description></item><item><title>Pricing as Code</title><link>https://notes.abser.top/Pricing-as-Code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/Pricing-as-Code/</guid><description>一种很新的东西. 概念模型: [[PriceOps]] 示例产品：[[Tier]] https://www.tier.run/</description></item><item><title>Request For Comments</title><link>https://notes.abser.top/Request-For-Comments/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/Request-For-Comments/</guid><description>摘要 RFC 不能修改，有可能是错的，他从相当意义上构成了互联网的历史。标准并不总是对的。
问题、提示 主要笔记 RFC由一系列草案组成，起始于1969年（第一个RFC文档发布于1969年4月7日，参见“RFC30年”，RFC2555”） “RFC编辑者”：约翰•普斯特尔（Jon Postel）（前 30 年）现在是一个小组 从哪里开始阅读 RFC #query 查找RFC的规范位置是 RFC编辑器网站。但是，正如我们将在下面看到的那样，RFC编辑器缺少一些关键信息，因此大多数人都使用 tools.ietf.org IETF介绍及RFC Draft撰写 | Louie&amp;rsquo;s Blog</description></item><item><title>Tier</title><link>https://notes.abser.top/Tier/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/Tier/</guid><description>https://www.tier.run/ 理念： [[Pricing as Code]] 、[[PriceOps]]</description></item><item><title>web 技术发展历程</title><link>https://notes.abser.top/web-%E6%8A%80%E6%9C%AF%E5%8F%91%E5%B1%95%E5%8E%86%E7%A8%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/web-%E6%8A%80%E6%9C%AF%E5%8F%91%E5%B1%95%E5%8E%86%E7%A8%8B/</guid><description>摘要 问题、提示 主要笔记 https://www.epicweb.dev/the-webs-next-transition ：具有详尽的关于 Web 技术发展的经验和论证优缺点。以及整个 web 历史的架构，都画了图说明。 能写出来需要优秀的经验和总结能力，这篇文章写的很好。毕竟 [[Focus and Different]] 其中提到 [[SPA]] 的[[状态管理]]是一个大问题，按我的经验来说也是，[[Redux]] 等状态管理的框架，[[UI]] 的[[单向渲染逻辑]]，都是状态管理的大问题。当然核心问题就是[[缓存失效]]！毕竟缓[[存失效是软件中最困难的问题之一]]。 提到了框架 [[Remix]]，找机会学学了解下 #todo https://twitter.com/shamwhoah/status/1575619809714503681 : 还能快速在 [[chrome 的 lighthouse 测试]]中获得很高分！</description></item><item><title>不要片面的根据一部分想法下决定</title><link>https://notes.abser.top/%E4%B8%8D%E8%A6%81%E7%89%87%E9%9D%A2%E7%9A%84%E6%A0%B9%E6%8D%AE%E4%B8%80%E9%83%A8%E5%88%86%E6%83%B3%E6%B3%95%E4%B8%8B%E5%86%B3%E5%AE%9A/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E4%B8%8D%E8%A6%81%E7%89%87%E9%9D%A2%E7%9A%84%E6%A0%B9%E6%8D%AE%E4%B8%80%E9%83%A8%E5%88%86%E6%83%B3%E6%B3%95%E4%B8%8B%E5%86%B3%E5%AE%9A/</guid><description>这个事例是在日常的生活中，会想到自己如果做什么事就好了。以写日记和记录照片为例，在自己翻看的时候就会想看到自己的记录，但实际上为了这个目的养成一个记录日记，照片，整理数据库的习惯是性价比不高的。以单满足一个回忆的需求来说，在年轻的时候是价值不高的，所以不推荐做。 那么一个简短总结就是标题。</description></item><item><title>为什么我们在RocksDB上创建CockroachDB项目？</title><link>https://notes.abser.top/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E4%BB%AC%E5%9C%A8RocksDB%E4%B8%8A%E5%88%9B%E5%BB%BACockroachDB%E9%A1%B9%E7%9B%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E4%BB%AC%E5%9C%A8RocksDB%E4%B8%8A%E5%88%9B%E5%BB%BACockroachDB%E9%A1%B9%E7%9B%AE/</guid><description>https://www.cockroachlabs.com/blog/cockroachdb-on-rocksd/</description></item><item><title>使用 quartz 托管 obsidian 到网络上</title><link>https://notes.abser.top/%E4%BD%BF%E7%94%A8-quartz-%E6%89%98%E7%AE%A1-obsidian-%E5%88%B0%E7%BD%91%E7%BB%9C%E4%B8%8A/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E4%BD%BF%E7%94%A8-quartz-%E6%89%98%E7%AE%A1-obsidian-%E5%88%B0%E7%BD%91%E7%BB%9C%E4%B8%8A/</guid><description>Refer https://quartz.jzhao.xyz/notes/setup/ https://quartz.jzhao.xyz/notes/obsidian/</description></item><item><title>分布式</title><link>https://notes.abser.top/%E5%88%86%E5%B8%83%E5%BC%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E5%88%86%E5%B8%83%E5%BC%8F/</guid><description>[[巨石应用]] 其实也能满足老旧小公司的需求，只是技术含量跟不上时代罢了。
其实真正需要的是低成本，灵活性，随取随用，轻松连接，这也是云时代的需求。</description></item><item><title>基础设施的培育</title><link>https://notes.abser.top/%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E7%9A%84%E5%9F%B9%E8%82%B2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E7%9A%84%E5%9F%B9%E8%82%B2/</guid><description>摘要 问题、提示 主要笔记 [[Hashicorp]] 现在就像是 [[IaaS]] 行业的标准了，但是现在我们需要的是各个行业的细分标准的确立 像 [[altogic]] 这样的软件服务，只要[[IaaS|基础设施即服务]]能够做好，上层这些应用构建都不太难。 [[行业的细分标准-基础设施层|如何定义当前行业的细分标准]]？ 不清楚，现在要做的是尝试去做这方面的工作。以快速提供一个 [[firestore]] 类似服务的框架为载体探究一下如何完成这件事。</description></item><item><title>大型深度学习模型</title><link>https://notes.abser.top/%E5%A4%A7%E5%9E%8B%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A8%A1%E5%9E%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E5%A4%A7%E5%9E%8B%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A8%A1%E5%9E%8B/</guid><description>摘要 问题、提示 为什么大型深度学习模型需要极大的内存 #query 主要笔记 需要大内存储存==中间层==的==激活函数输出==和==权重==等 模型训练限制 只能在单个 GPU 上训练，批大小（batch size）设置得极小 太大的模型，单个 GPU 又放不下 大型模型训练方法： [[数据并行]] [[模型并行]] [[2022-10-18]] 当前流行的九大深度学习库 [[Megatron-LM]] [[DeepSpeed]] [[FairScale]] [[ParallelFormers]] [[ColossalAI]] [[Alpa]] [[Hivemind]] [[OneFlow]] [[Mesh-Tensorflow]]</description></item><item><title>存储领域的事件</title><link>https://notes.abser.top/%E5%AD%98%E5%82%A8%E9%A2%86%E5%9F%9F%E7%9A%84%E4%BA%8B%E4%BB%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E5%AD%98%E5%82%A8%E9%A2%86%E5%9F%9F%E7%9A%84%E4%BA%8B%E4%BB%B6/</guid><description>摘要 问题、提示 全球存储发展的几大趋势：分布式、云化、[[闪存化]]、[[存储领域的智能化|智能]] 主要笔记 事件 2010年：EMC收购Isilon，22.5亿美元 ;
2010年：惠普收购3Par，23.5亿美元 ;
2011年：戴尔收购Compellent，9.6亿美元 ;
2011年：[[希捷]]收购[[三星]]硬盘，13.75亿美元 ;
2011年：[[西部数据]]收购日立GST，48亿美元 ;
2012年：[[VMware]]提出[[SDDC（软件定义数据中心）]]和[[SDS（软件定义存储）]]的概念，之后推出SDS产品 – Virtual SAN的预览版
2013年：Avago收购LSI，66亿美元 ;
2014年：闪迪收购Fusion-io，11亿美元 ;
2015年：戴尔收购EMC，630亿美元 ;
2015年：[[西部数据]]收购闪迪，160亿美元 ;
2016年：IBM收购对象存储，约13亿美元 ;
2016年：[[HCI]]（超融合）概念提出者[[Nutanix]]上市；
2016年：博通收购博科，59亿美元 ;
2016年：OpenText收购Dell EMC企业内容部门(包括Documentum等)，16.2亿美元 ;
2017年：HPE收购Nimble Storage，10.9亿美元 ;</description></item><item><title>性能调优</title><link>https://notes.abser.top/%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/</guid><description>在非分布式时代，单机性能调优还有些作用。在云上时代，除非没钱需要[[降本增效]]，不然加机器加配置就行。相对于商业价值来说，一般的硬件成本占比较低。</description></item><item><title>旅行的本质</title><link>https://notes.abser.top/%E6%97%85%E8%A1%8C%E7%9A%84%E6%9C%AC%E8%B4%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E6%97%85%E8%A1%8C%E7%9A%84%E6%9C%AC%E8%B4%A8/</guid><description>用异化思想去思考： 旅行的本质是
个人远离他们文化的真实道路 深入未知的深处重塑自我 然后将这种学习带回他们的文化，这样它就可以发展 旅行就是人类的一种[[离群算法]]应用，另一种应用是学习具有稀缺性的技能 [[学习稀缺的技能]]
为什么小说里的英雄冒险那么吸引人 -&amp;gt; [[英雄之旅]]</description></item><item><title>清理 GIt 中的历史文件</title><link>https://notes.abser.top/%E6%B8%85%E7%90%86-GIt-%E4%B8%AD%E7%9A%84%E5%8E%86%E5%8F%B2%E6%96%87%E4%BB%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E6%B8%85%E7%90%86-GIt-%E4%B8%AD%E7%9A%84%E5%8E%86%E5%8F%B2%E6%96%87%E4%BB%B6/</guid><description>1 git filter-branch --force --index-filter &amp;#39;git rm --cached --ignore-unmatch path-to-your-remove-file&amp;#39; --prune-empty --tag-name-filter cat -- --all 其中, path-to-your-remove-file 就是你要删除的文件的相对路径(相对于git仓库的跟目录), 替换成你要删除的文件即可. 注意一点，这里的文件或文件夹，都不能以 &amp;lsquo;/&amp;rsquo; 开头，否则文件或文件夹会被认为是从 git 的安装目录开始。
如果你要删除的目标不是文件，而是文件夹，那么请在 git rm --cached 命令后面添加 -r 命令，表示递归的删除（子）文件夹和文件夹下的文件，类似于 rm -rf 命令。
更多请参考： https://help.github.com/articles/remove-sensitive-data</description></item><item><title>生活没有意义？</title><link>https://notes.abser.top/%E7%94%9F%E6%B4%BB%E6%B2%A1%E6%9C%89%E6%84%8F%E4%B9%89/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E7%94%9F%E6%B4%BB%E6%B2%A1%E6%9C%89%E6%84%8F%E4%B9%89/</guid><description>参见我的 [[Focus and Different]] 原则</description></item><item><title>私有云</title><link>https://notes.abser.top/%E7%A7%81%E6%9C%89%E4%BA%91/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E7%A7%81%E6%9C%89%E4%BA%91/</guid><description>摘要 问题、提示 主要笔记 [[HCI|超融合]] 可以视为私有云的一种部署形态</description></item><item><title>端口占用问题</title><link>https://notes.abser.top/%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E9%97%AE%E9%A2%98/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E9%97%AE%E9%A2%98/</guid><description>摘要 ps -ef | grep then netstat -anp | grep pid lsof -i:port_num 主要笔记 netstat netstat -tunlp 用于显示 tcp，udp 的端口和进程等相关情况。 netstat 查看端口占用语法格式： netstat -tunlp | grep 端口号
-t (tcp) 仅显示tcp相关选项 -u (udp)仅显示udp相关选项 -n 拒绝显示别名，能显示数字的全部转化为数字 -l 仅列出在Listen(监听)的服务状态 -p 显示建立相关链接的程序名</description></item><item><title>英雄之旅</title><link>https://notes.abser.top/%E8%8B%B1%E9%9B%84%E4%B9%8B%E6%97%85/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E8%8B%B1%E9%9B%84%E4%B9%8B%E6%97%85/</guid><description>英雄之旅就是人类社会中的最常见的原型神话。
![[Pasted image 20220929203142.png]]![[Pasted image 20220929203529.png]]</description></item><item><title>逐步描述一个新模型的方式</title><link>https://notes.abser.top/%E9%80%90%E6%AD%A5%E6%8F%8F%E8%BF%B0%E4%B8%80%E4%B8%AA%E6%96%B0%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%96%B9%E5%BC%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E9%80%90%E6%AD%A5%E6%8F%8F%E8%BF%B0%E4%B8%80%E4%B8%AA%E6%96%B0%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%96%B9%E5%BC%8F/</guid><description>通过描述一个东西，能提供什么，能做什么来感知他。
不要急着下定义，这会让自己丧失求知欲。
有点像编程领域的[[鸭子类型]]的延伸。</description></item><item><title>降本增效</title><link>https://notes.abser.top/%E9%99%8D%E6%9C%AC%E5%A2%9E%E6%95%88/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E9%99%8D%E6%9C%AC%E5%A2%9E%E6%95%88/</guid><description>新词，顾名思义
和大环境也有关，[[diary/2022-10-12]] 记录：由于[[疫情]]原因，全球[[经济]]都有萎缩的倾向，大部分企业寻求降本增效来活下去。
[[Kubernetes 集群的降本增效]]</description></item><item><title>鸭子类型</title><link>https://notes.abser.top/%E9%B8%AD%E5%AD%90%E7%B1%BB%E5%9E%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.abser.top/%E9%B8%AD%E5%AD%90%E7%B1%BB%E5%9E%8B/</guid><description>同 Duck-Type
原理是：只要一个东西会“嘎嘎”叫，就认为它是一只鸭子。</description></item></channel></rss>